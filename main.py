import discord
from discord.ext import commands, tasks
import asyncio
import random
import json
import datetime
import math
import requests
import base64
import hashlib
import time
import os
import aiohttp
from dotenv import load_dotenv
import sqlite3
import re
import psutil
import urllib.parse
from deep_translator import GoogleTranslator
import queue
import yt_dlp
import google.generativeai as genai  # Import Gemini API theo m·∫´u m·ªõi
from google.generativeai.types import GenerationConfig  # Import GenerationConfig
# Load environment variables
load_dotenv()
# Kh·ªüi t·∫°o Gemini (th√™m v√†o ƒë·∫ßu file ho·∫∑c tr∆∞·ªõc c√°c l·ªánh, n·∫øu ch∆∞a c√≥)
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
model = genai.GenerativeModel("gemini-1.5-flash")
# Bot setup
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix='!', intents=intents)

# Database setup
def init_db():
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    
    # User data table
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, 
                  level INTEGER DEFAULT 1,
                  exp INTEGER DEFAULT 0,
                  coins INTEGER DEFAULT 100,
                  last_daily TEXT)''')
    
    # Reminders table
    c.execute('''CREATE TABLE IF NOT EXISTS reminders
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  message TEXT,
                  remind_time TEXT)''')
    
    # Notes table
    c.execute('''CREATE TABLE IF NOT EXISTS notes
                 (user_id INTEGER,
                  note_id INTEGER,
                  content TEXT,
                  created_at TEXT,
                  PRIMARY KEY (user_id, note_id))''')
    
    conn.commit()
    conn.close()

init_db()

# Kh·ªüi t·∫°o h√†ng ƒë·ª£i nh·∫°c
music_queues = {}  # {guild_id: queue.Queue()}

# C·∫•u h√¨nh yt-dlp
ytdl_format_options = {
    'format': 'bestaudio/best',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0'
}

ytdl = yt_dlp.YoutubeDL(ytdl_format_options)

class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.5):
        super().__init__(source, volume)
        self.data = data
        self.title = data.get('title')
        self.url = data.get('url')

    @classmethod
    async def from_url(cls, url, *, loop=None, stream=True):
        loop = loop or asyncio.get_event_loop()
        data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=not stream))
        
        if 'entries' in data:
            data = data['entries'][0]

        filename = data['url'] if stream else ytdl.prepare_filename(data)
        return cls(discord.FFmpegPCMAudio(filename, **{'options': '-vn'}), data=data)

# Helper functions
def get_user_data(user_id):
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    data = c.fetchone()
    if not data:
        c.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()
        data = (user_id, 1, 0, 100, None)
    conn.close()
    return data

def update_user_data(user_id, level=None, exp=None, coins=None, last_daily=None):
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    
    updates = []
    values = []
    
    if level is not None:
        updates.append("level = ?")
        values.append(level)
    if exp is not None:
        updates.append("exp = ?")
        values.append(exp)
    if coins is not None:
        updates.append("coins = ?")
        values.append(coins)
    if last_daily is not None:
        updates.append("last_daily = ?")
        values.append(last_daily)
    
    values.append(user_id)
    
    query = f"UPDATE users SET {', '.join(updates)} WHERE user_id = ?"
    c.execute(query, values)
    conn.commit()
    conn.close()

# Danh s√°ch tr·∫°ng th√°i ƒë·ªông (bao g·ªìm streaming v·ªõi URL)
statuses = [
    discord.Activity(type=discord.ActivityType.playing, name="ƒêang ch∆°i Freefire"),
    discord.Activity(type=discord.ActivityType.watching, name="ƒêang xem review phim"),
    discord.Activity(type=discord.ActivityType.listening, name="nh·∫°c chill po-"),
    discord.Activity(type=discord.ActivityType.competing, name="thi ƒë·∫•u code"),
    discord.Streaming(name="Xem Hentai", url="https://ihentai.ws/kyou-wa-yubiwa-o-hazusukara-1/"),
    discord.Streaming(name="Stream game tr√™n Twitch", url="https://www.twitch.tv/example_streamer"),
    discord.Activity(type=discord.ActivityType.watching, name="Anime"),
    discord.Activity(type=discord.ActivityType.listening, name="lofi hip hop"),
    discord.Streaming(name="W/n", url="youtube.com/watch?v=OA8s2Gr3KEE&list=RDMMOA8s2Gr3KEE&start_radio=1"),
]

@tasks.loop(seconds=30)  # Thay ƒë·ªïi m·ªói 30 gi√¢y
async def change_status():
    """Thay ƒë·ªïi tr·∫°ng th√°i bot ng·∫´u nhi√™n"""
    status = random.choice(statuses)
    await bot.change_presence(activity=status)   

@bot.event
async def on_ready():
    print(f'{bot.user} ƒë√£ s·∫µn s√†ng!')
    check_reminders.start()
    change_status.start()  # B·∫Øt ƒë·∫ßu task thay ƒë·ªïi tr·∫°ng th√°i

# =============================================================================
# L·ªÜNH TH√îNG TIN V√Ä TI·ªÜN √çCH CHUNG (1-20)
# =============================================================================

@bot.command(name='help_all')
async def help_all(ctx):
    """1. Hi·ªÉn th·ªã t·∫•t c·∫£ l·ªánh c·ªßa bot"""
    embed = discord.Embed(title="üìã Danh s√°ch 100 l·ªánh", color=0x00ff00)
    embed.add_field(name="Th√¥ng tin & Ti·ªán √≠ch (1-20)", value="!info, !ping, !uptime, !avatar, !serverinfo, !userinfo, !math, !translate, !weather, !time, !qr, !shorten, !password, !color, !ip, !hash, !base64, !binary, !hex, !vt, !ascii", inline=False)
    embed.add_field(name="Gi·∫£i tr√≠ & Tr√≤ ch∆°i (21-40)", value="!waifu, !chat, !joke, !fact, !quote, !roll, !coinflip, !8ball, !rps, !trivia, !hangman, !number_guess, !word_chain, !riddle, !story, !meme, !gif, !emoji_react, !truth_dare, !would_you_rather, !this_or_that, !fortune", inline=False)
    embed.add_field(name="√Çm nh·∫°c & Media (41-50)", value="!play, !pause, !skip, !queue, !volume, !lyrics, !spotify, !youtube, !podcast, !radio", inline=False)
    embed.add_field(name="Qu·∫£n l√Ω & Moderation (51-65)", value="!ban, !kick, !mute, !unmute, !warn, !clear, !slowmode, !lock, !unlock, !role, !nick, !announce, !poll, !vote, !automod, !log", inline=False)
    embed.add_field(name="Kinh t·∫ø & Leveling (66-80)", value="!daily, !balance, !pay, !shop, !buy, !inventory, !gamble, !work, !level, !leaderboard, !rank, !exp, !profile, !badge, !achievement", inline=False)
    embed.add_field(name="Ti·ªán √≠ch n√¢ng cao (81-100)", value="!remind, !todo, !note, !calc, !convert, !search, !news, !stock, !crypto, !bookmark, !schedule, !timer, !stopwatch, !alarm, !backup, !export, !import, !stats, !analyze, !report", inline=False)
    # Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
    current_status = bot.activity.name if bot.activity else "Kh√¥ng c√≥ tr·∫°ng th√°i"
    embed.add_field(name="Tr·∫°ng th√°i", value=current_status, inline=True)
    await ctx.send(embed=embed)

@bot.command(name='info')
async def info(ctx):
    """2. Th√¥ng tin v·ªÅ bot"""
    embed = discord.Embed(title="ü§ñ Th√¥ng tin Bot", color=0x0099ff)
    embed.add_field(name="T√™n", value=bot.user.name, inline=True)
    embed.add_field(name="ID", value=bot.user.id, inline=True)
    embed.add_field(name="Servers", value=len(bot.guilds), inline=True)
    embed.add_field(name="Users", value=len(bot.users), inline=True)
    embed.add_field(name="Phi√™n b·∫£n", value="1.0.0", inline=True)
    embed.add_field(name="Prefix", value="!", inline=True)
    embed.add_field(name="Owner", value="@hoang_62070")
    embed.add_field(name="Owner", value="https://guns.lol/hoanqdev1z")
    await ctx.send(embed=embed)

@bot.command(name='ping')
async def ping(ctx):
    """3. Ki·ªÉm tra ƒë·ªô tr·ªÖ"""
    latency = round(bot.latency * 1000)
    await ctx.send(f'üèì Pong! ƒê·ªô tr·ªÖ: {latency}ms')

@bot.command(name='uptime')
async def uptime(ctx):
    """4. Th·ªùi gian ho·∫°t ƒë·ªông"""
    if not hasattr(bot, 'start_time'):
        bot.start_time = datetime.datetime.now()
    uptime = datetime.datetime.now() - bot.start_time
    await ctx.send(f'‚è∞ Bot ƒë√£ ho·∫°t ƒë·ªông: {uptime}')

@bot.command(name='avatar')
async def avatar(ctx, member: discord.Member = None):
    """5. Hi·ªÉn th·ªã avatar"""
    if member is None:
        member = ctx.author
    embed = discord.Embed(title=f"Avatar c·ªßa {member.display_name}")
    embed.set_image(url=member.avatar.url if member.avatar else member.default_avatar.url)
    await ctx.send(embed=embed)

@bot.command(name='serverinfo')
async def serverinfo(ctx):
    """6. Th√¥ng tin server"""
    guild = ctx.guild
    embed = discord.Embed(title=f"Th√¥ng tin {guild.name}", color=0x00ff00)
    embed.add_field(name="Ch·ªß s·ªü h·ªØu", value=guild.owner.mention if guild.owner else "Kh√¥ng x√°c ƒë·ªãnh", inline=True)
    embed.add_field(name="Th√†nh vi√™n", value=guild.member_count, inline=True)
    embed.add_field(name="Ng√†y t·∫°o", value=guild.created_at.strftime("%d/%m/%Y"), inline=True)
    embed.add_field(name="Boost Level", value=guild.premium_tier, inline=True)
    embed.add_field(name="K√™nh", value=len(guild.channels), inline=True)
    embed.add_field(name="Roles", value=len(guild.roles), inline=True)
    if guild.icon:
        embed.set_thumbnail(url=guild.icon.url)
    await ctx.send(embed=embed)

@bot.command(name='userinfo')
async def userinfo(ctx, member: discord.Member = None):
    """7. Th√¥ng tin ng∆∞·ªùi d√πng"""
    if member is None:
        member = ctx.author
    
    embed = discord.Embed(title=f"Th√¥ng tin {member.display_name}", color=member.color)
    embed.add_field(name="ID", value=member.id, inline=True)
    embed = discord.Embed(title=f"Avatar{member.display_name}")
    embed.set_image(url=member.avatar.url if member.avatar else member.default_avatar.url)
    embed.add_field(name="T√™n", value=str(member), inline=True)
    embed.add_field(name="Nickname", value=member.display_name, inline=True)
    embed.add_field(name="Ng√†y tham gia Discord", value=member.created_at.strftime("%d/%m/%Y"), inline=True)
    if member.joined_at:
        embed.add_field(name="Ng√†y v√†o server", value=member.joined_at.strftime("%d/%m/%Y"), inline=True)
    embed.add_field(name="Tr·∫°ng th√°i", value=str(member.status), inline=True)
    
    roles = [role.mention for role in member.roles[1:]]
    if roles:
        embed.add_field(name="Roles", value=" ".join(roles), inline=False)
    
    if member.avatar:
        embed.set_thumbnail(url=member.avatar.url)
    
    await ctx.send(embed=embed)

@bot.command(name='math')
async def math_calc(ctx, *, expression):
    """8. M√°y t√≠nh to√°n h·ªçc"""
    try:
        # Ch·ªâ cho ph√©p c√°c k√Ω t·ª± an to√†n
        allowed_chars = set('0123456789+-*/().,^ ')
        if not all(c in allowed_chars for c in expression):
            await ctx.send("‚ùå Ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng s·ªë v√† c√°c ph√©p to√°n c∆° b·∫£n!")
            return
        
        # Thay th·∫ø ^ b·∫±ng **
        expression = expression.replace('^', '**')
        result = eval(expression)
        await ctx.send(f"üßÆ {expression} = {result}")
    except Exception as e:
        await ctx.send("‚ùå Bi·ªÉu th·ª©c kh√¥ng h·ª£p l·ªá!")

@bot.command(name='translate')
async def translate(ctx, target_lang, *, text):
    """9. D·ªãch vƒÉn b·∫£n"""
    
    
    # Danh s√°ch m√£ ng√¥n ng·ªØ h·ªó tr·ª£
    valid_languages = {
        'vi': 'Vietnamese', 'en': 'English', 'fr': 'French', 'es': 'Spanish',
        'de': 'German', 'ja': 'Japanese', 'ko': 'Korean', 'zh-cn': 'Chinese (Simplified)',
        'ru': 'Russian', 'it': 'Italian'
    }
    
    if target_lang.lower() not in valid_languages:
        await ctx.send(f"‚ùå Ng√¥n ng·ªØ kh√¥ng h·ª£p l·ªá! H·ªó tr·ª£: {', '.join(f'{k} ({v})' for k, v in valid_languages.items())}")
        return
    
    try:
        # D·ªãch vƒÉn b·∫£n
        translator = GoogleTranslator(source='auto', target=target_lang.lower())
        translated_text = translator.translate(text[:500])  # Gi·ªõi h·∫°n 500 k√Ω t·ª±
        
        if not translated_text:
            await ctx.send("‚ùå Kh√¥ng th·ªÉ d·ªãch vƒÉn b·∫£n n√†y!")
            return
        
        # T·∫°o embed
        embed = discord.Embed(title="üåê D·ªãch vƒÉn b·∫£n", color=0x00b7eb)
        embed.add_field(name="VƒÉn b·∫£n g·ªëc", value=text[:100] + ("..." if len(text) > 100 else ""), inline=False)
        embed.add_field(name=f"D·ªãch sang {valid_languages[target_lang.lower()]}", value=translated_text[:100] + ("..." if len(translated_text) > 100 else ""), inline=False)
        embed.set_footer(text="Ngu·ªìn: Google Translate | C·∫≠p nh·∫≠t: " + datetime.datetime.now().strftime("%d/%m/%Y %H:%M"))
        await ctx.send(embed=embed)
    
    except Exception as e:
        await ctx.send(f"‚ùå L·ªói khi d·ªãch vƒÉn b·∫£n: {str(e)}")

@bot.command(name='weather')
async def weather(ctx, *, city):
    """10. Th·ªùi ti·∫øt (c·∫ßn API key)"""
    await ctx.send(f"üå§Ô∏è Th·ªùi ti·∫øt t·∫°i {city}: C·∫ßn API key ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt")

@bot.command(name='time')
async def current_time(ctx, timezone="UTC"):
    """11. Th·ªùi gian hi·ªán t·∫°i"""
    now = datetime.datetime.now()
    await ctx.send(f"üïê Th·ªùi gian hi·ªán t·∫°i: {now.strftime('%H:%M:%S %d/%m/%Y')}")

@bot.command(name='qr')
async def qr_code(ctx, *, text):
    """12. T·∫°o m√£ QR"""
    encoded_text = urllib.parse.quote(text)
    qr_url = f"https://api.qrserver.com/v1/create-qr-code/?size=200x200&data={encoded_text}"
    embed = discord.Embed(title="üì± M√£ QR", description=text)
    embed.set_image(url=qr_url)
    await ctx.send(embed=embed)

@bot.command(name='shorten')
async def shorten_url(ctx, url):
    """13. R√∫t g·ªçn URL"""
    # Ki·ªÉm tra URL h·ª£p l·ªá
    if not is_url(url):
        await ctx.send("‚ùå URL kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p URL b·∫Øt ƒë·∫ßu b·∫±ng http:// ho·∫∑c https://")
        return

    # URL API TinyURL
    tinyurl_api = f"https://tinyurl.com/api-create.php?url={urllib.parse.quote(url)}"

    try:
        response = requests.get(tinyurl_api, timeout=5)
        response.raise_for_status()
        shortened_url = response.text

        if not shortened_url or "error" in shortened_url.lower():
            await ctx.send("‚ùå Kh√¥ng th·ªÉ r√∫t g·ªçn URL!")
            return

        # T·∫°o embed
        embed = discord.Embed(title="üîó URL R√∫t G·ªçn", color=0x00b7eb)
        embed.add_field(name="URL G·ªëc", value=url[:100] + ("..." if len(url) > 100 else ""), inline=False)
        embed.add_field(name="URL R√∫t G·ªçn", value=shortened_url, inline=False)
        embed.set_footer(text="Ngu·ªìn: TinyURL | C·∫≠p nh·∫≠t: " + datetime.datetime.now().strftime("%d/%m/%Y %H:%M"))
        await ctx.send(embed=embed)

    except requests.exceptions.RequestException as e:
        await ctx.send(f"‚ùå L·ªói khi r√∫t g·ªçn URL: {str(e)}")

@bot.command(name='password')
async def generate_password(ctx, length: int = 12):
    """14. T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n"""
    import string
    if length > 50:
        length = 50
    chars = string.ascii_letters + string.digits + "!@#$%^&*"
    password = ''.join(random.choice(chars) for _ in range(length))
    embed = discord.Embed(title="üîê M·∫≠t kh·∫©u m·ªõi", description=f"||{password}||")
    try:
        await ctx.author.send(embed=embed)
        await ctx.send("‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ri√™ng cho b·∫°n!")
    except discord.Forbidden:
        await ctx.send("‚ùå Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ri√™ng! Vui l√≤ng b·∫≠t DM.")

@bot.command(name='color')
async def color_info(ctx, color_code):
    """15. Th√¥ng tin m√†u s·∫Øc"""
    try:
        if color_code.startswith('#'):
            color_code = color_code[1:]
        color_int = int(color_code, 16)
        embed = discord.Embed(title=f"üé® M√†u #{color_code}", color=color_int)
        embed.add_field(name="Hex", value=f"#{color_code}", inline=True)
        embed.add_field(name="RGB", value=f"({color_int >> 16}, {(color_int >> 8) & 255}, {color_int & 255})", inline=True)
        await ctx.send(embed=embed)
    except ValueError:
        await ctx.send("‚ùå M√£ m√†u kh√¥ng h·ª£p l·ªá!")

@bot.command(name='ip')
async def ip_info(ctx, ip=""):
    """16. Th√¥ng tin IP"""
    if not ip:
        await ctx.send("üì° ƒê·ªÉ ki·ªÉm tra IP, h√£y nh·∫≠p: !ip <ƒë·ªãa_ch·ªâ_ip>")
    else:
        await ctx.send(f"üì° Th√¥ng tin IP {ip}: C·∫ßn API ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt")

@bot.command(name='hash')
async def hash_text(ctx, algorithm, *, text):
    """17. Hash vƒÉn b·∫£n"""
    try:
        if algorithm.lower() == 'md5':
            result = hashlib.md5(text.encode()).hexdigest()
        elif algorithm.lower() == 'sha1':
            result = hashlib.sha1(text.encode()).hexdigest()
        elif algorithm.lower() == 'sha256':
            result = hashlib.sha256(text.encode()).hexdigest()
        else:
            await ctx.send("‚ùå Thu·∫≠t to√°n h·ªó tr·ª£: md5, sha1, sha256")
            return
        
        embed = discord.Embed(title=f"üîê Hash {algorithm.upper()}")
        embed.add_field(name="Input", value=text[:100], inline=False)
        embed.add_field(name="Output", value=f"```{result}```", inline=False)
        await ctx.send(embed=embed)
    except Exception as e:
        await ctx.send(f"‚ùå L·ªói: {str(e)}")

@bot.command(name='base64')
async def base64_encode(ctx, action, *, text):
    """18. Encode/Decode Base64"""
    try:
        if action.lower() == 'encode':
            result = base64.b64encode(text.encode()).decode()
        elif action.lower() == 'decode':
            result = base64.b64decode(text.encode()).decode()
        else:
            await ctx.send("‚ùå S·ª≠ d·ª•ng: !base64 encode/decode <text>")
            return
        
        embed = discord.Embed(title=f"üîÑ Base64 {action.title()}")
        embed.add_field(name="Input", value=text[:100], inline=False)
        embed.add_field(name="Output", value=f"```{result}```", inline=False)
        await ctx.send(embed=embed)
    except Exception:
        await ctx.send("‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω vƒÉn b·∫£n!")

@bot.command(name='binary')
async def binary_convert(ctx, action, *, text):
    """19. Chuy·ªÉn ƒë·ªïi binary"""
    try:
        if action.lower() == 'encode':
            result = ' '.join(format(ord(char), '08b') for char in text)
        elif action.lower() == 'decode':
            binary_values = text.split()
            result = ''.join(chr(int(binary, 2)) for binary in binary_values)
        else:
            await ctx.send("‚ùå S·ª≠ d·ª•ng: !binary encode/decode <text>")
            return
        
        await ctx.send(f"üî¢ K·∫øt qu·∫£: ```{result}```")
    except Exception:
        await ctx.send("‚ùå Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi!")

@bot.command(name='hex')
async def hex_convert(ctx, action, *, text):
    """20. Chuy·ªÉn ƒë·ªïi hex"""
    try:
        if action.lower() == 'encode':
            result = text.encode().hex()
        elif action.lower() == 'decode':
            result = bytes.fromhex(text).decode()
        else:
            await ctx.send("‚ùå S·ª≠ d·ª•ng: !hex encode/decode <text>")
            return
        
        await ctx.send(f"üî¢ K·∫øt qu·∫£: ```{result}```")
    except Exception:
        await ctx.send("‚ùå Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi!")

# Th√™m l·ªánh !vt
@bot.command(name='vt')
@commands.cooldown(1, 5, commands.BucketType.user)  # 1 l·∫ßn/5 gi√¢y/ng∆∞·ªùi d√πng
async def virustotal(ctx, *, input: str = None):
    """Qu√©t URL, file hash, ho·∫∑c file ƒë√≠nh k√®m b·∫±ng VirusTotal API v3"""
    if not os.getenv("VIRUSTOTAL_API_KEY"):
        await ctx.send("‚ùå L·ªói: Thi·∫øu API key VirusTotal! Vui l√≤ng li√™n h·ªá admin.")
        return

    headers = {
        "x-apikey": os.getenv("VIRUSTOTAL_API_KEY"),
        "accept": "application/json"
    }

    # Ki·ªÉm tra input v√† file ƒë√≠nh k√®m
    is_file = False
    if ctx.message.attachments:
        attachment = ctx.message.attachments[0]
        if attachment.size > 32 * 1024 * 1024:  # 32MB
            await ctx.send("‚ùå L·ªói: File qu√° l·ªõn! VirusTotal ch·ªâ h·ªó tr·ª£ file <32MB.")
            return
        is_file = True
    elif input:
        # Ki·ªÉm tra URL ho·∫∑c hash
        url_pattern = re.compile(r'^(https?://)?([\w.-]+)\.([a-z]{2,})(/.*)?$')
        hash_pattern = re.compile(r'^[a-fA-F0-9]{32}$|^[a-fA-F0-9]{40}$|^[a-fA-F0-9]{64}$')  # MD5, SHA1, SHA256
        input = input.strip()
        if url_pattern.match(input):
            type = "url"
            if not input.startswith(("http://", "https://")):
                input = "https://" + input
            import base64
            url_id = base64.urlsafe_b64encode(input.encode()).decode().rstrip("=")
            endpoint = f"https://www.virustotal.com/api/v3/urls/{url_id}"
        elif hash_pattern.match(input):
            type = "file"
            endpoint = f"https://www.virustotal.com/api/v3/files/{input}"
        else:
            await ctx.send("‚ùå Input kh√¥ng h·ª£p l·ªá! Vui l√≤ng cung c·∫•p URL, hash (MD5/SHA1/SHA256), ho·∫∑c ƒë√≠nh k√®m file.")
            return
    else:
        await ctx.send("‚ùå Vui l√≤ng cung c·∫•p URL, hash, ho·∫∑c ƒë√≠nh k√®m file ƒë·ªÉ qu√©t!")
        return

    # Retry logic: Th·ª≠ t·ªëi ƒëa 3 l·∫ßn
    max_retries = 3
    retry_delay = 5  # Gi√¢y
    for attempt in range(max_retries):
        try:
            if is_file:
                # T·∫£i file t·ª´ Discord
                async with aiohttp.ClientSession() as session:
                    async with session.get(attachment.url) as resp:
                        if resp.status != 200:
                            await ctx.send("‚ùå L·ªói: Kh√¥ng th·ªÉ t·∫£i file ƒë√≠nh k√®m!")
                            return
                        file_data = await resp.read()
                
                # Upload file l√™n VirusTotal
                upload_endpoint = "https://www.virustotal.com/api/v3/files"
                files = {"file": (attachment.filename, file_data)}
                response = requests.post(upload_endpoint, headers=headers, files=files, timeout=10)
                response.raise_for_status()
                analysis_id = response.json().get("data", {}).get("id")
                
                # Ch·ªù k·∫øt qu·∫£ qu√©t (t·ªëi ƒëa 60 gi√¢y)
                analysis_endpoint = f"https://www.virustotal.com/api/v3/analyses/{analysis_id}"
                max_wait = 60  # Gi√¢y
                wait_interval = 5  # Gi√¢y
                elapsed = 0
                while elapsed < max_wait:
                    response = requests.get(analysis_endpoint, headers=headers, timeout=10)
                    response.raise_for_status()
                    status = response.json().get("data", {}).get("attributes", {}).get("status")
                    if status == "completed":
                        break
                    await asyncio.sleep(wait_interval)
                    elapsed += wait_interval
                
                if status != "completed":
                    await ctx.send("‚ùå L·ªói: Qu√©t file kh√¥ng ho√†n t·∫•t trong th·ªùi gian ch·ªù (60 gi√¢y)! Vui l√≤ng th·ª≠ l·∫°i.")
                    return
                
                # L·∫•y k·∫øt qu·∫£ file
                file_id = response.json().get("data", {}).get("attributes", {}).get("results", {}).get("sha256")
                if not file_id:
                    await ctx.send("‚ùå L·ªói: Kh√¥ng l·∫•y ƒë∆∞·ª£c SHA256 c·ªßa file! Vui l√≤ng th·ª≠ l·∫°i.")
                    return
                endpoint = f"https://www.virustotal.com/api/v3/files/{file_id}"
                response = requests.get(endpoint, headers=headers, timeout=10)
                response.raise_for_status()
                type = "file"
            
            # G·ªçi API VirusTotal
            response = requests.get(endpoint, headers=headers, timeout=10)
            response.raise_for_status()
            data = response.json().get("data", {}).get("attributes", {})

            if not data:
                await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu t·ª´ VirusTotal! Vui l√≤ng th·ª≠ l·∫°i.")
                return

            # T·∫°o embed
            embed = discord.Embed(title="üîç K·∫øt Qu·∫£ VirusTotal", color=0x00b7eb)
            embed.add_field(name="Input", value=(attachment.filename if is_file else input)[:200] + ("..." if len(attachment.filename if is_file else input) > 200 else ""), inline=False)
            
            stats = data.get("last_analysis_stats", {})
            embed.add_field(name="Tr·∫°ng Th√°i", value="ƒê√£ qu√©t", inline=False)
            embed.add_field(name="K·∫øt Qu·∫£", value=f"ƒê·ªôc h·∫°i: {stats.get('malicious', 0)} | Nghi ng·ªù: {stats.get('suspicious', 0)} | An to√†n: {stats.get('harmless', 0)} | Kh√¥ng x√°c ƒë·ªãnh: {stats.get('undetected', 0)}", inline=False)
            embed.add_field(name="L·∫ßn Qu√©t Cu·ªëi", value=datetime.datetime.fromtimestamp(data.get("last_analysis_date", 0)).strftime("%d/%m/%Y %H:%M"), inline=False)
            
            if type == "url":
                embed.add_field(name="L∆∞·ª£t B√¨nh Ch·ªçn", value=f"An to√†n: {data.get('total_votes', {}).get('harmless', 0)} | ƒê·ªôc h·∫°i: {data.get('total_votes', {}).get('malicious', 0)}", inline=False)
            else:  # file
                embed.add_field(name="T√™n File", value=", ".join(data.get("names", ["Kh√¥ng x√°c ƒë·ªãnh"]))[:200], inline=False)
            
            embed.set_footer(text="Ngu·ªìn: VirusTotal | C·∫≠p nh·∫≠t: " + datetime.datetime.now().strftime("%d/%m/%Y %H:%M"))
            await ctx.send(embed=embed)
            return

        except requests.exceptions.HTTPError as e:
            if response.status_code == 429:
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)  # Ch·ªù tr∆∞·ªõc khi th·ª≠ l·∫°i
                    continue
                await ctx.send("‚ùå Qu√° nhi·ªÅu y√™u c·∫ßu ƒë·∫øn VirusTotal API! Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y.")
                return
            elif response.status_code == 404:
                await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y b√°o c√°o cho input n√†y! C√≥ th·ªÉ file ch∆∞a ƒë∆∞·ª£c qu√©t ho·∫∑c kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c d√πng file kh√°c.")
                return
            else:
                await ctx.send(f"‚ùå L·ªói khi g·ªçi VirusTotal API: {str(e)}")
                return
        except Exception as e:
            await ctx.send(f"‚ùå L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu: {str(e)}")
            return

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f"‚ùå L·ªánh ƒëang trong th·ªùi gian ch·ªù! Th·ª≠ l·∫°i sau {error.retry_after:.2f} gi√¢y.")
    else:
        raise error    

# =============================================================================
# L·ªÜNH GI·∫¢I TR√ç V√Ä TR√í CH∆†I (21-40)
# =============================================================================

# Th√™m l·ªánh !waifu
@bot.command(name='waifu')
@commands.cooldown(1, 5, commands.BucketType.user)  # 1 l·∫ßn/5 gi√¢y/ng∆∞·ªùi d√πng
async def waifu(ctx, type: str = "sfw", category: str = None):
    """L·∫•y h√¨nh ·∫£nh anime ng·∫´u nhi√™n t·ª´ waifu.pics (SFW ho·∫∑c NSFW)"""
    # Danh s√°ch danh m·ª•c t·ª´ https://waifu.pics/docs
    sfw_categories = [
        "waifu", "neko", "shinobu", "megumin", "bully", "cuddle",
        "cry", "hug", "awoo", "kiss", "lick", "pat", "smug",
        "bonk", "yeet", "blush", "smile", "wave", "highfive",
        "handhold", "nom", "bite", "glomp", "slap", "kill",
        "kick", "happy", "wink", "poke", "dance", "cringe"
    ]
    nsfw_categories = ["waifu", "neko", "trap", "blowjob"]

    # X√°c ƒë·ªãnh lo·∫°i (sfw ho·∫∑c nsfw)
    type = type.lower()
    if type not in ["sfw", "nsfw"]:
        await ctx.send("‚ùå Lo·∫°i kh√¥ng h·ª£p l·ªá! Ch·ªçn 'sfw' ho·∫∑c 'nsfw'.")
        return

    # Ki·ªÉm tra k√™nh NSFW n·∫øu type l√† nsfw
    if type == "nsfw" and not ctx.channel.is_nsfw():
        await ctx.send("‚ùå N·ªôi dung NSFW ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong k√™nh NSFW!")
        return

    # Ch·ªçn danh s√°ch danh m·ª•c d·ª±a tr√™n type
    categories = sfw_categories if type == "sfw" else nsfw_categories

    # N·∫øu kh√¥ng c√≥ danh m·ª•c, ch·ªçn ng·∫´u nhi√™n t·ª´ danh s√°ch
    if category is None:
        category = "waifu"  # M·∫∑c ƒë·ªãnh
        category_display = f"{type}/waifu (ng·∫´u nhi√™n)"
    else:
        category = category.lower()
        if category not in categories:
            await ctx.send(f"‚ùå Danh m·ª•c kh√¥ng h·ª£p l·ªá! C√°c danh m·ª•c {type.upper()}: {', '.join(categories)}")
            return
        category_display = f"{type}/{category}"

    # T·∫°o URL endpoint
    endpoint = f"https://api.waifu.pics/{type}/{category}"

    # Retry logic: Th·ª≠ t·ªëi ƒëa 3 l·∫ßn
    max_retries = 3
    retry_delay = 5  # Gi√¢y
    for attempt in range(max_retries):
        try:
            # G·ªçi API waifu.pics
            response = requests.get(endpoint, timeout=10)
            response.raise_for_status()  # Ki·ªÉm tra l·ªói HTTP
            data = response.json()
            image_url = data.get("url")

            if not image_url:
                await ctx.send("‚ùå L·ªói: Kh√¥ng l·∫•y ƒë∆∞·ª£c h√¨nh ·∫£nh t·ª´ API!")
                return

            # T·∫°o embed
            embed = discord.Embed(title="üé® H√¨nh ·∫¢nh Anime", color=0x00b7eb)
            embed.set_image(url=image_url)
            embed.add_field(name="Lo·∫°i/Danh M·ª•c", value=category_display.capitalize(), inline=False)
            embed.set_footer(text="Ngu·ªìn: waifu.pics | C·∫≠p nh·∫≠t: " + datetime.datetime.now().strftime("%d/%m/%Y %H:%M"))
            await ctx.send(embed=embed)
            return

        except requests.exceptions.HTTPError as e:
            if response.status_code == 429:
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)  # Ch·ªù tr∆∞·ªõc khi th·ª≠ l·∫°i
                    continue
                await ctx.send("‚ùå Qu√° nhi·ªÅu y√™u c·∫ßu ƒë·∫øn waifu.pics API! Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y.")
                return
            else:
                await ctx.send(f"‚ùå L·ªói khi g·ªçi waifu.pics API: {str(e)}")
                return
        except Exception as e:
            await ctx.send(f"‚ùå L·ªói khi x·ª≠ l√Ω h√¨nh ·∫£nh: {str(e)}")
            return

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f"‚ùå L·ªánh ƒëang trong th·ªùi gian ch·ªù! Th·ª≠ l·∫°i sau {error.retry_after:.2f} gi√¢y.")
    else:
        raise error

@bot.command(name='chat')
@commands.cooldown(1, 5, commands.BucketType.user)  # 1 l·∫ßn/5 gi√¢y/ng∆∞·ªùi d√πng
async def chat_gemini(ctx, *, query):
    """51. Tr√≤ chuy·ªán v·ªõi Gemini"""
    if not os.getenv("GEMINI_API_KEY"):
        await ctx.send("‚ùå L·ªói: Thi·∫øu API key Gemini! Vui l√≤ng li√™n h·ªá admin.")
        return

    # Retry logic: Th·ª≠ t·ªëi ƒëa 3 l·∫ßn
    max_retries = 3
    retry_delay = 5  # Gi√¢y
    for attempt in range(max_retries):
        try:
            # G·ªçi Gemini API
            response = model.generate_content(
                contents=query,
                generation_config=GenerationConfig(
                    max_output_tokens=150,
                    temperature=0.7
                )
            )
            answer_en = response.text.strip()

            # D·ªãch sang ti·∫øng Vi·ªát
            translator = GoogleTranslator(source='en', target='vi')
            answer_vi = translator.translate(answer_en[:500])  # Gi·ªõi h·∫°n 500 k√Ω t·ª±

            # T·∫°o embed
            embed = discord.Embed(title="üí¨ Tr√≤ Chuy·ªán v·ªõi Gemini", color=0x00b7eb)
            embed.add_field(name="C√¢u H·ªèi", value=query[:200] + ("..." if len(query) > 200 else ""), inline=False)
            embed.add_field(name="Tr·∫£ L·ªùi (Ti·∫øng Anh)", value=answer_en[:200] + ("..." if len(answer_en) > 200 else ""), inline=False)
            embed.add_field(name="Tr·∫£ L·ªùi (Ti·∫øng Vi·ªát)", value=answer_vi[:200] + ("..." if len(answer_vi) > 200 else ""), inline=False)
            embed.set_footer(text="Ngu·ªìn: Google Gemini | C·∫≠p nh·∫≠t: " + datetime.datetime.now().strftime("%d/%m/%Y %H:%M"))
            await ctx.send(embed=embed)
            return

        except Exception as e:
            if "rate limit" in str(e).lower() or "429" in str(e).lower():
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)  # Ch·ªù tr∆∞·ªõc khi th·ª≠ l·∫°i
                    continue
                await ctx.send("‚ùå Qu√° nhi·ªÅu y√™u c·∫ßu ƒë·∫øn Gemini API! Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y.")
                return
            else:
                await ctx.send(f"‚ùå L·ªói khi g·ªçi Gemini API: {str(e)}")
                return

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f"‚ùå L·ªánh ƒëang trong th·ªùi gian ch·ªù! Th·ª≠ l·∫°i sau {error.retry_after:.2f} gi√¢y.")
    else:
        raise error

@bot.command(name='joke')
async def joke(ctx):
    """21. K·ªÉ chuy·ªán c∆∞·ªùi"""
    try:
        # G·ªçi API ƒë·ªÉ l·∫•y c√¢u chuy·ªán c∆∞·ªùi ng·∫´u nhi√™n (safe-mode ƒë·ªÉ tr√°nh n·ªôi dung kh√¥ng ph√π h·ª£p)
        response = requests.get("https://v2.jokeapi.dev/joke/Any?safe-mode&type=single&lang=en", timeout=5)
        response.raise_for_status()
        joke_data = response.json()

        # L·∫•y c√¢u chuy·ªán c∆∞·ªùi
        if joke_data["type"] == "single":
            joke_en = joke_data.get("joke", "Kh√¥ng c√≥ c√¢u chuy·ªán c∆∞·ªùi n√†o ƒë∆∞·ª£c tr·∫£ v·ªÅ!")
            setup_en = None
            delivery_en = None
        else:
            setup_en = joke_data.get("setup", "Kh√¥ng c√≥ ph·∫ßn m·ªü ƒë·∫ßu!")
            delivery_en = joke_data.get("delivery", "Kh√¥ng c√≥ ph·∫ßn k·∫øt th√∫c!")
            joke_en = f"{setup_en} {delivery_en}"

        # D·ªãch sang ti·∫øng Vi·ªát
        translator = GoogleTranslator(source='en', target='vi')
        if setup_en and delivery_en:
            setup_vi = translator.translate(setup_en[:500])  # Gi·ªõi h·∫°n 500 k√Ω t·ª±
            delivery_vi = translator.translate(delivery_en[:500])
            joke_vi = f"{setup_vi} {delivery_vi}"
        else:
            joke_vi = translator.translate(joke_en[:500])

        # T·∫°o embed
        embed = discord.Embed(title="üòÇ C√¢u Chuy·ªán C∆∞·ªùi", color=0xff4500)
        if setup_en and delivery_en:
            embed.add_field(name="Ti·∫øng Anh (Setup)", value=setup_en[:200] + ("..." if len(setup_en) > 200 else ""), inline=False)
            embed.add_field(name="Ti·∫øng Anh (Delivery)", value=delivery_en[:200] + ("..." if len(delivery_en) > 200 else ""), inline=False)
            embed.add_field(name="Ti·∫øng Vi·ªát", value=f"{setup_vi[:100]}... {delivery_vi[:100]}" + ("..." if len(joke_vi) > 200 else ""), inline=False)
        else:
            embed.add_field(name="Ti·∫øng Anh", value=joke_en[:200] + ("..." if len(joke_en) > 200 else ""), inline=False)
            embed.add_field(name="Ti·∫øng Vi·ªát", value=joke_vi[:200] + ("..." if len(joke_vi) > 200 else ""), inline=False)
        embed.set_footer(text="Ngu·ªìn: JokeAPI | C·∫≠p nh·∫≠t: " + datetime.datetime.now().strftime("%d/%m/%Y %H:%M"))
        await ctx.send(embed=embed)

    except requests.exceptions.RequestException as e:
        await ctx.send(f"‚ùå L·ªói khi l·∫•y c√¢u chuy·ªán c∆∞·ªùi: {str(e)}")
    except Exception as e:
        await ctx.send(f"‚ùå L·ªói khi d·ªãch c√¢u chuy·ªán c∆∞·ªùi: {str(e)}")

@bot.command(name='fact')
async def random_fact(ctx):
    """22. S·ª± th·∫≠t th√∫ v·ªã"""
    try:
        # G·ªçi API ƒë·ªÉ l·∫•y s·ª± th·∫≠t ng·∫´u nhi√™n
        response = requests.get("https://uselessfacts.jsph.pl/api/v2/facts/random", timeout=5)
        response.raise_for_status()
        fact_data = response.json()
        fact_en = fact_data.get("text", "Kh√¥ng c√≥ s·ª± th·∫≠t n√†o ƒë∆∞·ª£c tr·∫£ v·ªÅ!")

        # D·ªãch sang ti·∫øng Vi·ªát
        translator = GoogleTranslator(source='en', target='vi')
        fact_vi = translator.translate(fact_en[:500])  # Gi·ªõi h·∫°n 500 k√Ω t·ª± ƒë·ªÉ d·ªãch nhanh

        # T·∫°o embed
        embed = discord.Embed(title="üß† S·ª± Th·∫≠t Th√∫ V·ªã", color=0x00b7eb)
        embed.add_field(name="Ti·∫øng Anh", value=fact_en[:200] + ("..." if len(fact_en) > 200 else ""), inline=False)
        embed.add_field(name="Ti·∫øng Vi·ªát", value=fact_vi[:200] + ("..." if len(fact_vi) > 200 else ""), inline=False)
        embed.set_footer(text="Ngu·ªìn: Useless Facts API | C·∫≠p nh·∫≠t: " + datetime.datetime.now().strftime("%d/%m/%Y %H:%M"))
        await ctx.send(embed=embed)

    except requests.exceptions.RequestException as e:
        await ctx.send(f"‚ùå L·ªói khi l·∫•y s·ª± th·∫≠t: {str(e)}")
    except Exception as e:
        await ctx.send(f"‚ùå L·ªói khi d·ªãch s·ª± th·∫≠t: {str(e)}")

@bot.command(name='quote')
async def inspirational_quote(ctx):
    """23. C√¢u n√≥i truy·ªÅn c·∫£m h·ª©ng"""
    try:
        # G·ªçi API ƒë·ªÉ l·∫•y c√¢u tr√≠ch d·∫´n ng·∫´u nhi√™n
        response = requests.get("https://api.quotable.io/random", timeout=5)
        response.raise_for_status()
        quote_data = response.json()
        quote_en = quote_data.get("content", "Kh√¥ng c√≥ c√¢u tr√≠ch d·∫´n n√†o ƒë∆∞·ª£c tr·∫£ v·ªÅ!")
        author = quote_data.get("author", "Kh√¥ng r√µ t√°c gi·∫£")

        # D·ªãch sang ti·∫øng Vi·ªát
        translator = GoogleTranslator(source='en', target='vi')
        quote_vi = translator.translate(quote_en[:500])  # Gi·ªõi h·∫°n 500 k√Ω t·ª± ƒë·ªÉ d·ªãch nhanh

        # T·∫°o embed
        embed = discord.Embed(title="‚ú® C√¢u Tr√≠ch D·∫´n Truy·ªÅn C·∫£m H·ª©ng", color=0xffd700)
        embed.add_field(name="Ti·∫øng Anh", value=f"{quote_en[:200]}..." if len(quote_en) > 200 else quote_en, inline=False)
        embed.add_field(name="Ti·∫øng Vi·ªát", value=f"{quote_vi[:200]}..." if len(quote_vi) > 200 else quote_vi, inline=False)
        embed.add_field(name="T√°c gi·∫£", value=author, inline=False)
        embed.set_footer(text="Ngu·ªìn: Quotable API | C·∫≠p nh·∫≠t: " + datetime.datetime.now().strftime("%d/%m/%Y %H:%M"))
        await ctx.send(embed=embed)

    except requests.exceptions.RequestException as e:
        await ctx.send(f"‚ùå L·ªói khi l·∫•y c√¢u tr√≠ch d·∫´n: {str(e)}")
    except Exception as e:
        await ctx.send(f"‚ùå L·ªói khi d·ªãch c√¢u tr√≠ch d·∫´n: {str(e)}")

@bot.command(name='roll')
async def roll_dice(ctx, dice="1d6"):
    """24. Tung x√∫c x·∫Øc"""
    try:
        if 'd' not in dice:
            await ctx.send("‚ùå ƒê·ªãnh d·∫°ng: !roll XdY (v√≠ d·ª•: 2d6)")
            return
        
        num_dice, num_sides = map(int, dice.split('d'))
        if num_dice > 10 or num_sides > 100:
            await ctx.send("‚ùå T·ªëi ƒëa 10 x√∫c x·∫Øc, 100 m·∫∑t!")
            return
        
        results = [random.randint(1, num_sides) for _ in range(num_dice)]
        total = sum(results)
        
        embed = discord.Embed(title="üé≤ K·∫øt qu·∫£ tung x√∫c x·∫Øc", color=0xff6b6b)
        embed.add_field(name="X√∫c x·∫Øc", value=dice, inline=True)
        embed.add_field(name="K·∫øt qu·∫£", value=" + ".join(map(str, results)), inline=True)
        embed.add_field(name="T·ªïng", value=total, inline=True)
        await ctx.send(embed=embed)
    except ValueError:
        await ctx.send("‚ùå ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá!")

@bot.command(name='coinflip')
async def coinflip(ctx):
    """25. Tung ƒë·ªìng xu"""
    result = random.choice(['Ng·ª≠a', 'S·∫•p'])
    coin_emoji = 'ü™ô' if result == 'Ng·ª≠a' else 'üü§'
    await ctx.send(f"{coin_emoji} K·∫øt qu·∫£: **{result}**!")

@bot.command(name='8ball')
async def eight_ball(ctx, *, question):
    """26. Qu·∫£ c·∫ßu 8"""
    responses = [
        "‚úÖ Ch·∫Øc ch·∫Øn l√† c√≥",
        "‚úÖ Kh√¥ng nghi ng·ªù g√¨ n·ªØa",
        "‚úÖ C√≥",
        "ü§î C√≥ th·ªÉ",
        "ü§î H·ªèi l·∫°i sau",
        "ü§î Kh√¥ng ch·∫Øc l·∫Øm",
        "‚ùå ƒê·ª´ng m∆°",
        "‚ùå Kh√¥ng",
        "‚ùå R·∫•t kh√¥ng c√≥ kh·∫£ nƒÉng"
    ]
    await ctx.send(f"üé± {random.choice(responses)}")

@bot.command(name='rps')
async def rock_paper_scissors(ctx, choice):
    """27. K√©o b√∫a bao"""
    choices = ['rock', 'paper', 'scissors', 'k√©o', 'b√∫a', 'bao']
    if choice.lower() not in choices:
        await ctx.send("‚ùå Ch·ªçn: rock/paper/scissors ho·∫∑c k√©o/b√∫a/bao")
        return
    
    # Chu·∫©n h√≥a l·ª±a ch·ªçn
    choice_map = {'k√©o': 'scissors', 'b√∫a': 'rock', 'bao': 'paper'}
    user_choice = choice_map.get(choice.lower(), choice.lower())
    
    bot_choice = random.choice(['rock', 'paper', 'scissors'])
    
    emoji_map = {'rock': 'ü™®', 'paper': 'üìÑ', 'scissors': '‚úÇÔ∏è'}
    
    if user_choice == bot_choice:
        result = "H√≤a!"
    elif (user_choice == 'rock' and bot_choice == 'scissors') or \
         (user_choice == 'paper' and bot_choice == 'rock') or \
         (user_choice == 'scissors' and bot_choice == 'paper'):
        result = "B·∫°n th·∫Øng! üéâ"
    else:
        result = "Bot th·∫Øng! ü§ñ"
    
    await ctx.send(f"{emoji_map[user_choice]} vs {emoji_map[bot_choice]}\n{result}")

@bot.command(name='trivia')
async def trivia(ctx):
    """28. C√¢u h·ªèi tr·∫Øc nghi·ªám"""
    questions = [
        {"q": "Ng√¥n ng·ªØ l·∫≠p tr√¨nh n√†o ƒë∆∞·ª£c t·∫°o b·ªüi Guido van Rossum?", "a": "Python", "options": ["Java", "Python", "C++", "JavaScript"]},
        {"q": "HTTP vi·∫øt t·∫Øt c·ªßa g√¨?", "a": "HyperText Transfer Protocol", "options": ["HyperText Transfer Protocol", "High Tech Transfer Protocol", "Home Tool Transfer Protocol", "Host Transfer Protocol"]},
        {"q": "NƒÉm n√†o World Wide Web ƒë∆∞·ª£c ph√°t minh?", "a": "1989", "options": ["1985", "1989", "1991", "1993"]}
    ]
    
    question = random.choice(questions)
    random.shuffle(question["options"])
    
    embed = discord.Embed(title="üß† Trivia", description=question["q"], color=0x4CAF50)
    for i, option in enumerate(question["options"], 1):
        embed.add_field(name=f"{i}.", value=option, inline=True)
    
    embed.set_footer(text="Tr·∫£ l·ªùi b·∫±ng s·ªë 1-4")
    
    msg = await ctx.send(embed=embed)
    
    def check(m):
        return m.author == ctx.author and m.channel == ctx.channel and m.content in ['1', '2', '3', '4']
    
    try:
        response = await bot.wait_for('message', check=check, timeout=30)
        user_answer = question["options"][int(response.content) - 1]
        
        if user_answer == question["a"]:
            await ctx.send("‚úÖ Ch√≠nh x√°c! üéâ")
        else:
            await ctx.send(f"‚ùå Sai r·ªìi! ƒê√°p √°n ƒë√∫ng l√†: {question['a']}")
    except asyncio.TimeoutError:
        await ctx.send("‚è∞ H·∫øt th·ªùi gian!")

@bot.command(name='hangman')
async def hangman(ctx):
    """29. Tr√≤ ch∆°i ƒëo√°n t·ª´"""
    words = ['python', 'discord', 'computer', 'programming', 'developer', 'algorithm', 'database']
    word = random.choice(words).upper()
    guessed = set()
    wrong_guesses = 0
    max_wrong = 6
    
    def display_word():
        return ' '.join(letter if letter in guessed else '_' for letter in word)
    
    embed = discord.Embed(title="üéØ Hangman", description=f"```{display_word()}```")
    embed.add_field(name="Sai", value=f"{wrong_guesses}/{max_wrong}", inline=True)
    embed.add_field(name="ƒê√£ ƒëo√°n", value=' '.join(sorted(guessed)) or 'Ch∆∞a c√≥', inline=True)
    
    msg = await ctx.send(embed=embed)
    
    while wrong_guesses < max_wrong and '_' in display_word():
        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel and len(m.content) == 1 and m.content.isalpha()
        
        try:
            response = await bot.wait_for('message', check=check, timeout=60)
            letter = response.content.upper()
            
            if letter in guessed:
                await ctx.send("üîÑ B·∫°n ƒë√£ ƒëo√°n ch·ªØ n√†y r·ªìi!")
                continue
            
            guessed.add(letter)
            
            if letter in word:
                if '_' not in display_word():
                    await ctx.send(f"üéâ Ch√∫c m·ª´ng! T·ª´ c·∫ßn t√¨m l√†: **{word}**")
                    break
            else:
                wrong_guesses += 1
            
            embed = discord.Embed(title="üéØ Hangman", description=f"```{display_word()}```")
            embed.add_field(name="Sai", value=f"{wrong_guesses}/{max_wrong}", inline=True)
            embed.add_field(name="ƒê√£ ƒëo√°n", value=' '.join(sorted(guessed)), inline=True)
            
            await msg.edit(embed=embed)
            
        except asyncio.TimeoutError:
            await ctx.send("‚è∞ H·∫øt th·ªùi gian!")
            break
    
    if wrong_guesses >= max_wrong:
        await ctx.send(f"üíÄ B·∫°n ƒë√£ thua! T·ª´ c·∫ßn t√¨m l√†: **{word}**")

@bot.command(name='number_guess')
async def number_guess(ctx, max_num: int = 100):
    """30. ƒêo√°n s·ªë"""
    if max_num > 1000:
        max_num = 1000
    
    number = random.randint(1, max_num)
    attempts = 0
    max_attempts = math.ceil(math.log2(max_num)) + 2
    
    embed = discord.Embed(title="üî¢ ƒêo√°n s·ªë", description=f"ƒêo√°n s·ªë t·ª´ 1 ƒë·∫øn {max_num}")
    embed.add_field(name="S·ªë l·∫ßn ƒëo√°n t·ªëi ƒëa", value=max_attempts, inline=True)
    await ctx.send(embed=embed)
    
    while attempts < max_attempts:
        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel and m.content.isdigit()
        
        try:
            response = await bot.wait_for('message', check=check, timeout=60)
            guess = int(response.content)
            attempts += 1
            
            if guess == number:
                await ctx.send(f"üéâ Ch√≠nh x√°c! S·ªë c·∫ßn t√¨m l√† {number}. B·∫°n ƒë√£ ƒëo√°n trong {attempts} l·∫ßn!")
                break
            elif guess < number:
                await ctx.send(f"üìà Cao h∆°n! C√≤n {max_attempts - attempts} l·∫ßn")
            else:
                await ctx.send(f"üìâ Th·∫•p h∆°n! C√≤n {max_attempts - attempts} l·∫ßn")
                
        except asyncio.TimeoutError:
            await ctx.send("‚è∞ H·∫øt th·ªùi gian!")
            break
    
    if attempts >= max_attempts:
        await ctx.send(f"üíÄ H·∫øt l∆∞·ª£t ƒëo√°n! S·ªë c·∫ßn t√¨m l√†: **{number}**")

@bot.command(name='word_chain')
async def word_chain(ctx):
    """31. N·ªëi t·ª´"""
    await ctx.send("üîó Tr√≤ ch∆°i n·ªëi t·ª´ b·∫Øt ƒë·∫ßu! T·ª´ ƒë·∫ßu ti√™n: **COMPUTER**\nNg∆∞·ªùi ti·∫øp theo n√≥i t·ª´ b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ 'R'")

@bot.command(name='riddle')
async def riddle(ctx):
    """32. C√¢u ƒë·ªë"""
    riddles = [
        {"q": "C√°i g√¨ c√≥ keys nh∆∞ng kh√¥ng c√≥ locks, c√≥ space nh∆∞ng kh√¥ng c√≥ room?", "a": "keyboard"},
        {"q": "C√°i g√¨ ch·∫°y nh∆∞ng kh√¥ng c√≥ ch√¢n?", "a": "n∆∞·ªõc"},
        {"q": "C√°i g√¨ c√≥ m·∫Øt nh∆∞ng kh√¥ng nh√¨n th·∫•y?", "a": "kim"},
        {"q": "Bug n√†o kh√¥ng ph·∫£i l√† l·ªói?", "a": "con bug"}
    ]
    
    riddle = random.choice(riddles)
    embed = discord.Embed(title="üß© C√¢u ƒë·ªë", description=riddle["q"], color=0x9C27B0)
    embed.set_footer(text="G√µ c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n!")
    
    await ctx.send(embed=embed)
    
    def check(m):
        return m.author == ctx.author and m.channel == ctx.channel
    
    try:
        response = await bot.wait_for('message', check=check, timeout=60)
        if riddle["a"].lower() in response.content.lower():
            await ctx.send("üéâ Ch√≠nh x√°c!")
        else:
            await ctx.send(f"‚ùå ƒê√°p √°n ƒë√∫ng l√†: **{riddle['a']}**")
    except asyncio.TimeoutError:
        await ctx.send(f"‚è∞ H·∫øt th·ªùi gian! ƒê√°p √°n l√†: **{riddle['a']}**")

@bot.command(name='story')
async def random_story(ctx):
    """33. C√¢u chuy·ªán ng·∫´u nhi√™n"""
    stories = [
        "üìñ Ng√†y x∆∞a c√≥ m·ªôt developer, anh ta code su·ªët ng√†y ƒë√™m. M·ªôt h√¥m anh ta g·∫∑p m·ªôt bug k·ª≥ l·∫°...",
        "üìñ Trong m·ªôt server Discord xa x√¥i, c√≥ m·ªôt bot r·∫•t th√¥ng minh...",
        "üìñ C√≥ l·∫ßn m·ªôt AI quy·∫øt ƒë·ªãnh h·ªçc c√°ch n·∫•u ƒÉn, k·∫øt qu·∫£ th·∫≠t b·∫•t ng·ªù..."
    ]
    await ctx.send(random.choice(stories))

@bot.command(name='meme')
async def meme(ctx):
    """34. Meme ng·∫´u nhi√™n"""
    memes = [
        "```\n  ‚à©‚îÄ‚îÄ‚îÄ‚à©\n  ‚îÇ   ‚îÇ\n  ‚îÇ ‚óï ‚îÇ  <- Khi code ch·∫°y l·∫ßn ƒë·∫ßu\n  ‚îÇ   ‚îÇ\n  ‚à©‚îÄ‚îÄ‚îÄ‚à©\n```",
        "```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ 99 little bugs  ‚îÇ\n‚îÇ in the code     ‚îÇ\n‚îÇ 99 little bugs  ‚îÇ\n‚îÇ take one down   ‚îÇ\n‚îÇ patch it around ‚îÇ\n‚îÇ 117 little bugs ‚îÇ\n‚îÇ in the code     ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```"
    ]
    await ctx.send(random.choice(memes))

@bot.command(name='gif')
async def gif_search(ctx, *, query):
    """35. T√¨m GIF"""
    api_key = os.getenv("TENOR_API_KEY")
    if not api_key:
        await ctx.send("‚ùå L·ªói: Thi·∫øu API key cho Tenor. Vui l√≤ng li√™n h·ªá admin!")
        return

    # URL API Tenor v·ªõi API key
    url = f"https://tenor.googleapis.com/v2/search?q={urllib.parse.quote(query)}&key={api_key}&limit=10&content_filter=high"
    
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()

        if not data.get("results"):
            await ctx.send(f"üé¨ Kh√¥ng t√¨m th·∫•y GIF n√†o cho '{query}'!")
            return

        # Ch·ªçn ng·∫´u nhi√™n m·ªôt GIF
        gif = random.choice(data["results"])
        gif_url = gif["media_formats"]["gif"]["url"]
        gif_title = gif.get("title", "GIF") or query

        # T·∫°o embed
        embed = discord.Embed(title=f"üé¨ GIF: {gif_title[:50]}", color=0xff69b4)
        embed.set_image(url=gif_url)
        embed.set_footer(text="Ngu·ªìn: Tenor | C·∫≠p nh·∫≠t: " + datetime.datetime.now().strftime("%d/%m/%Y %H:%M"))
        await ctx.send(embed=embed)
    
    except requests.exceptions.RequestException as e:
        await ctx.send(f"‚ùå L·ªói khi t√¨m GIF: {str(e)}")

@bot.command(name='emoji_react')
async def emoji_react(ctx):
    """36. React emoji ng·∫´u nhi√™n"""
    emojis = ['üòÄ', 'üòÇ', 'ü§î', 'üòé', 'üî•', 'üíØ', 'üéâ', 'üëç', '‚ù§Ô∏è', 'ü§ñ','üòé','üòà']
    for _ in range(3):
        try:
            await ctx.message.add_reaction(random.choice(emojis))
        except discord.HTTPException:
            continue

@bot.command(name='truth_dare')
async def truth_or_dare(ctx):
    """37. Truth or Dare"""
    truths = [
        "ƒêi·ªÅu g√¨ khi·∫øn b·∫°n c·∫£m th·∫•y t·ª± h√†o nh·∫•t?",
        "B·∫°n t·ª´ng l√†m g√¨ m√† c·∫£m th·∫•y ng·∫°i nh·∫•t?",
        "M∆° ∆∞·ªõc l·ªõn nh·∫•t c·ªßa b·∫°n l√† g√¨?"
    ]
    
    dares = [
        "H√°t m·ªôt b√†i h√°t trong 30 gi√¢y",
        "K·ªÉ m·ªôt c√¢u chuy·ªán c∆∞·ªùi",
        "Ch·ª•p ·∫£nh v·ªõi khu√¥n m·∫∑t h√†i h∆∞·ªõc"
    ]
    
    choice = random.choice(['Truth', 'Dare'])
    if choice == 'Truth':
        content = f"üí≠ **Truth**: {random.choice(truths)}"
    else:
        content = f"üé≠ **Dare**: {random.choice(dares)}"
    
    await ctx.send(content)

@bot.command(name='would_you_rather')
async def would_you_rather(ctx):
    """38. Would You Rather"""
    questions = [
        "B·∫°n mu·ªën c√≥ th·ªÉ bay hay c√≥ th·ªÉ t√†ng h√¨nh?",
        "B·∫°n mu·ªën bi·∫øt t∆∞∆°ng lai hay c√≥ th·ªÉ thay ƒë·ªïi qu√° kh·ª©?",
        "B·∫°n mu·ªën c√≥ 1 tri·ªáu ƒë√¥ hay c√≥ si√™u tr√≠ tu·ªá?",
        "B·∫°n mu·ªën code Python hay JavaScript c·∫£ ƒë·ªùi?"
    ]
    
    question = random.choice(questions)
    embed = discord.Embed(title="ü§∑ Would You Rather", description=question, color=0xFF5722)
    await ctx.send(embed=embed)

@bot.command(name='this_or_that')
async def this_or_that(ctx):
    """39. This or That"""
    options = [
        ["üçï Pizza", "üçî Burger"],
        ["‚òï Coffee", "üçµ Tea"],
        ["üåô Night", "‚òÄÔ∏è Day"],
        ["üè† Stay home", "üåç Travel"],
        ["üì± Mobile", "üíª PC"]
    ]
    
    choice = random.choice(options)
    await ctx.send(f"üéØ **This or That**: {choice[0]} ho·∫∑c {choice[1]}?")

@bot.command(name='fortune')
async def fortune_cookie(ctx):
    """40. B√°nh may m·∫Øn"""
    fortunes = [
        "ü•† Ng√†y mai s·∫Ω c√≥ tin t·ªët ƒë·∫øn v·ªõi b·∫°n",
        "ü•† H√£y tin v√†o kh·∫£ nƒÉng c·ªßa b·∫£n th√¢n",
        "ü•† M·ªôt c∆° h·ªôi m·ªõi ƒëang ch·ªù ƒë·ª£i",
        "ü•† Bug h√¥m nay s·∫Ω ƒë∆∞·ª£c fix th√†nh c√¥ng",
        "ü•† Code c·ªßa b·∫°n s·∫Ω ch·∫°y m∆∞·ª£t m√†"
    ]
    await ctx.send(random.choice(fortunes))

# =============================================================================
# L·ªÜNH √ÇM NH·∫†C V√Ä MEDIA (41-50)
# =============================================================================

@bot.command(name='play')
async def play_music(ctx, *, url):
    """41. Ph√°t nh·∫°c t·ª´ YouTube"""
    if not ctx.author.voice:
        await ctx.send("‚ùå B·∫°n c·∫ßn ·ªü trong voice channel ƒë·ªÉ ph√°t nh·∫°c!")
        return

    channel = ctx.author.voice.channel
    try:
        # K·∫øt n·ªëi voice channel n·∫øu ch∆∞a k·∫øt n·ªëi
        if not ctx.guild.voice_client:
            await channel.connect()
        
        voice_client = ctx.guild.voice_client

        # Kh·ªüi t·∫°o h√†ng ƒë·ª£i n·∫øu ch∆∞a c√≥
        if ctx.guild.id not in music_queues:
            music_queues[ctx.guild.id] = queue.Queue()

        # Th√™m b√†i h√°t v√†o h√†ng ƒë·ª£i
        music_queues[ctx.guild.id].put(url)

        # N·∫øu ƒëang ph√°t nh·∫°c, th√¥ng b√°o th√™m v√†o h√†ng ƒë·ª£i
        if voice_client.is_playing():
            await ctx.send(f"üéµ ƒê√£ th√™m v√†o h√†ng ƒë·ª£i: {url}")
            return

        # Ph√°t nh·∫°c t·ª´ h√†ng ƒë·ª£i
        async def play_next():
            if music_queues[ctx.guild.id].empty():
                await voice_client.disconnect()
                return

            next_url = music_queues[ctx.guild.id].get()
            try:
                player = await YTDLSource.from_url(next_url, loop=bot.loop, stream=True)
                voice_client.play(player, after=lambda e: bot.loop.create_task(play_next()))
                
                embed = discord.Embed(title="üéµ ƒêang Ph√°t Nh·∫°c", color=0x1db954)
                embed.add_field(name="B√†i H√°t", value=player.title, inline=False)
                embed.add_field(name="URL", value=next_url, inline=False)
                embed.set_footer(text="Ngu·ªìn: YouTube | C·∫≠p nh·∫≠t: " + datetime.datetime.now().strftime("%d/%m/%Y %H:%M"))
                await ctx.send(embed=embed)
            except Exception as e:
                await ctx.send(f"‚ùå L·ªói khi ph√°t nh·∫°c: {str(e)}")
                bot.loop.create_task(play_next())

        await play_next()

    except Exception as e:
        await ctx.send(f"‚ùå L·ªói khi k·∫øt n·ªëi ho·∫∑c ph√°t nh·∫°c: {str(e)}")

@bot.command(name='pause')
async def pause_music(ctx):
    """42. T·∫°m d·ª´ng nh·∫°c"""
    voice_client = ctx.guild.voice_client
    if voice_client and voice_client.is_playing():
        voice_client.pause()
        await ctx.send("‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng nh·∫°c")
    else:
        await ctx.send("‚ùå Kh√¥ng c√≥ nh·∫°c ƒëang ph√°t!")

@bot.command(name='skip')
async def skip_music(ctx):
    """43. B·ªè qua b√†i h√°t"""
    voice_client = ctx.guild.voice_client
    if voice_client and voice_client.is_playing():
        voice_client.stop()  # D·ª´ng b√†i hi·ªán t·∫°i, after callback s·∫Ω ph√°t b√†i ti·∫øp theo
        await ctx.send("‚è≠Ô∏è ƒê√£ b·ªè qua b√†i h√°t")
    else:
        await ctx.send("‚ùå Kh√¥ng c√≥ nh·∫°c ƒëang ph√°t!")

@bot.command(name='queue')
async def music_queue(ctx):
    """44. H√†ng ƒë·ª£i nh·∫°c"""
    if ctx.guild.id not in music_queues or music_queues[ctx.guild.id].empty():
        await ctx.send("üìã H√†ng ƒë·ª£i tr·ªëng")
        return

    queue_list = list(music_queues[ctx.guild.id].queue)
    if not queue_list:
        await ctx.send("üìã H√†ng ƒë·ª£i tr·ªëng")
        return

    embed = discord.Embed(title="üìã H√†ng ƒê·ª£i Nh·∫°c", color=0x1db954)
    for i, url in enumerate(queue_list, 1):
        embed.add_field(name=f"B√†i {i}", value=url[:100] + ("..." if len(url) > 100 else ""), inline=False)
    embed.set_footer(text="C·∫≠p nh·∫≠t: " + datetime.datetime.now().strftime("%d/%m/%Y %H:%M"))
    await ctx.send(embed=embed)

@bot.command(name='volume')
async def set_volume(ctx, volume: int):
    """45. ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng"""
    voice_client = ctx.guild.voice_client
    if not voice_client or not voice_client.is_playing():
        await ctx.send("‚ùå Kh√¥ng c√≥ nh·∫°c ƒëang ph√°t!")
        return

    if not 0 <= volume <= 100:
        await ctx.send("‚ùå √Çm l∆∞·ª£ng ph·∫£i t·ª´ 0-100!")
        return

    voice_client.source.volume = volume / 100
    await ctx.send(f"üîä ƒê√£ ƒë·∫∑t √¢m l∆∞·ª£ng: {volume}%")

@bot.command(name='lyrics')
async def get_lyrics(ctx, *, song):
    """46. L·ªùi b√†i h√°t"""
    await ctx.send(f"üé§ T√¨m l·ªùi b√†i h√°t '{song}' (C·∫ßn API ƒë·ªÉ ho·∫°t ƒë·ªông)")

@bot.command(name='spotify')
async def spotify_info(ctx, member: discord.Member = None):
    """47. Th√¥ng tin Spotify"""
    if member is None:
        member = ctx.author
    await ctx.send(f"üéß Spotify c·ªßa {member.display_name}: Kh√¥ng c√≥ ho·∫°t ƒë·ªông")

@bot.command(name='youtube')
async def youtube_search(ctx, *, query):
    """48. T√¨m YouTube"""
    encoded_query = urllib.parse.quote(query)
    url = f"https://www.youtube.com/results?search_query={encoded_query}"
    await ctx.send(f"üé¨ T√¨m ki·∫øm YouTube: {url}")

@bot.command(name='podcast')
async def podcast_search(ctx, *, query):
    """49. T√¨m Podcast"""
    await ctx.send(f"üéôÔ∏è T√¨m podcast '{query}' (C·∫ßn API ƒë·ªÉ ho·∫°t ƒë·ªông)")

@bot.command(name='radio')
async def online_radio(ctx, station="random"):
    """50. Radio online"""
    stations = ["Lofi Hip Hop", "Jazz", "Classical", "Rock", "Electronic"]
    if station == "random":
        station = random.choice(stations)
    await ctx.send(f"üìª ƒêang ph√°t: {station}")

# =============================================================================
# L·ªÜNH QU·∫¢N L√ù V√Ä MODERATION (51-65)
# =============================================================================

@bot.command(name='ban')
@commands.has_permissions(ban_members=True)
async def ban_user(ctx, member: discord.Member, *, reason="Kh√¥ng c√≥ l√Ω do"):
    """51. Ban th√†nh vi√™n"""
    try:
        await member.ban(reason=reason)
        embed = discord.Embed(title="üî® ƒê√£ ban", color=0xff0000)
        embed.add_field(name="Th√†nh vi√™n", value=member.mention, inline=True)
        embed.add_field(name="L√Ω do", value=reason, inline=True)
        embed.add_field(name="Ng∆∞·ªùi th·ª±c hi·ªán", value=ctx.author.mention, inline=True)
        await ctx.send(embed=embed)
    except discord.Forbidden:
        await ctx.send("‚ùå Kh√¥ng c√≥ quy·ªÅn ban th√†nh vi√™n n√†y!")
    except Exception as e:
        await ctx.send(f"‚ùå Kh√¥ng th·ªÉ ban th√†nh vi√™n n√†y: {str(e)}")

@bot.command(name='kick')
@commands.has_permissions(kick_members=True)
async def kick_user(ctx, member: discord.Member, *, reason="Kh√¥ng c√≥ l√Ω do"):
    """52. Kick th√†nh vi√™n"""
    try:
        await member.kick(reason=reason)
        embed = discord.Embed(title="üë¢ ƒê√£ kick", color=0xff9900)
        embed.add_field(name="Th√†nh vi√™n", value=member.mention, inline=True)
        embed.add_field(name="L√Ω do", value=reason, inline=True)
        await ctx.send(embed=embed)
    except discord.Forbidden:
        await ctx.send("‚ùå Kh√¥ng c√≥ quy·ªÅn kick th√†nh vi√™n n√†y!")
    except Exception as e:
        await ctx.send(f"‚ùå Kh√¥ng th·ªÉ kick th√†nh vi√™n n√†y: {str(e)}")

@bot.command(name='mute')
@commands.has_permissions(manage_roles=True)
async def mute_user(ctx, member: discord.Member, duration: int = 10):
    """53. Mute th√†nh vi√™n"""
    try:
        await member.timeout(datetime.timedelta(minutes=duration))
        await ctx.send(f"üîá ƒê√£ mute {member.mention} trong {duration} ph√∫t")
    except discord.Forbidden:
        await ctx.send("‚ùå Kh√¥ng c√≥ quy·ªÅn mute th√†nh vi√™n n√†y!")
    except Exception as e:
        await ctx.send(f"‚ùå Kh√¥ng th·ªÉ mute th√†nh vi√™n n√†y: {str(e)}")

@bot.command(name='unmute')
@commands.has_permissions(manage_roles=True)
async def unmute_user(ctx, member: discord.Member):
    """54. Unmute th√†nh vi√™n"""
    try:
        await member.timeout(None)
        await ctx.send(f"üîä ƒê√£ unmute {member.mention}")
    except discord.Forbidden:
        await ctx.send("‚ùå Kh√¥ng c√≥ quy·ªÅn unmute th√†nh vi√™n n√†y!")
    except Exception as e:
        await ctx.send(f"‚ùå Kh√¥ng th·ªÉ unmute th√†nh vi√™n n√†y: {str(e)}")

@bot.command(name='warn')
@commands.has_permissions(manage_messages=True)
async def warn_user(ctx, member: discord.Member, *, reason):
    """55. C·∫£nh b√°o th√†nh vi√™n"""
    embed = discord.Embed(title="‚ö†Ô∏è C·∫£nh b√°o", color=0xffff00)
    embed.add_field(name="Th√†nh vi√™n", value=member.mention, inline=True)
    embed.add_field(name="L√Ω do", value=reason, inline=True)
    embed.add_field(name="Ng∆∞·ªùi c·∫£nh b√°o", value=ctx.author.mention, inline=True)
    await ctx.send(embed=embed)
    
    try:
        await member.send(f"‚ö†Ô∏è B·∫°n ƒë√£ b·ªã c·∫£nh b√°o t·∫°i {ctx.guild.name}: {reason}")
    except discord.Forbidden:
        pass

@bot.command(name='clear')
@commands.has_permissions(manage_messages=True)
async def clear_messages(ctx, amount: int = 5):
    """56. X√≥a tin nh·∫Øn"""
    if amount > 100:
        amount = 100
    
    try:
        deleted = await ctx.channel.purge(limit=amount + 1)
        msg = await ctx.send(f"üóëÔ∏è ƒê√£ x√≥a {len(deleted) - 1} tin nh·∫Øn")
        await asyncio.sleep(5)
        await msg.delete()
    except discord.Forbidden:
        await ctx.send("‚ùå Kh√¥ng c√≥ quy·ªÅn x√≥a tin nh·∫Øn!")

@bot.command(name='slowmode')
@commands.has_permissions(manage_channels=True)
async def slowmode(ctx, seconds: int):
    """57. Ch·∫ø ƒë·ªô ch·∫≠m"""
    if seconds > 21600:  # 6 hours max
        seconds = 21600
    
    try:
        await ctx.channel.edit(slowmode_delay=seconds)
        if seconds == 0:
            await ctx.send("üêå ƒê√£ t·∫Øt ch·∫ø ƒë·ªô ch·∫≠m")
        else:
            await ctx.send(f"üêå ƒê√£ ƒë·∫∑t ch·∫ø ƒë·ªô ch·∫≠m: {seconds} gi√¢y")
    except discord.Forbidden:
        await ctx.send("‚ùå Kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi ch·∫ø ƒë·ªô ch·∫≠m!")

@bot.command(name='lock')
@commands.has_permissions(manage_channels=True)
async def lock_channel(ctx):
    """58. Kh√≥a k√™nh"""
    try:
        overwrite = ctx.channel.overwrites_for(ctx.guild.default_role)
        overwrite.send_messages = False
        await ctx.channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
        await ctx.send("üîí ƒê√£ kh√≥a k√™nh")
    except discord.Forbidden:
        await ctx.send("‚ùå Kh√¥ng c√≥ quy·ªÅn kh√≥a k√™nh!")

@bot.command(name='unlock')
@commands.has_permissions(manage_channels=True)
async def unlock_channel(ctx):
    """59. M·ªü kh√≥a k√™nh"""
    try:
        overwrite = ctx.channel.overwrites_for(ctx.guild.default_role)
        overwrite.send_messages = True
        await ctx.channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
        await ctx.send("üîì ƒê√£ m·ªü kh√≥a k√™nh")
    except discord.Forbidden:
        await ctx.send("‚ùå Kh√¥ng c√≥ quy·ªÅn m·ªü kh√≥a k√™nh!")

@bot.command(name='role')
@commands.has_permissions(manage_roles=True)
async def manage_role(ctx, action, member: discord.Member, *, role_name):
    """60. Qu·∫£n l√Ω role"""
    role = discord.utils.get(ctx.guild.roles, name=role_name)
    if not role:
        await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y role!")
        return
    
    try:
        if action.lower() == 'add':
            await member.add_roles(role)
            await ctx.send(f"‚úÖ ƒê√£ th√™m role {role.name} cho {member.mention}")
        elif action.lower() == 'remove':
            await member.remove_roles(role)
            await ctx.send(f"‚úÖ ƒê√£ x√≥a role {role.name} kh·ªèi {member.mention}")
        else:
            await ctx.send("‚ùå S·ª≠ d·ª•ng: !role add/remove @user role_name")
    except discord.Forbidden:
        await ctx.send("‚ùå Kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi role!")

@bot.command(name='nick')
@commands.has_permissions(manage_nicknames=True)
async def change_nickname(ctx, member: discord.Member, *, nickname):
    """61. ƒê·ªïi nickname"""
    try:
        await member.edit(nick=nickname)
        await ctx.send(f"‚úÖ ƒê√£ ƒë·ªïi nickname c·ªßa {member.mention} th√†nh: {nickname}")
    except discord.Forbidden:
        await ctx.send("‚ùå Kh√¥ng c√≥ quy·ªÅn ƒë·ªïi nickname!")

@bot.command(name='announce')
@commands.has_permissions(manage_messages=True)
async def announce(ctx, *, message):
    """62. Th√¥ng b√°o"""
    embed = discord.Embed(title="üì¢ Th√¥ng b√°o", description=message, color=0x00ff00)
    embed.set_footer(text=f"B·ªüi {ctx.author.display_name}", icon_url=ctx.author.avatar.url if ctx.author.avatar else None)
    await ctx.send(embed=embed)
    try:
        await ctx.message.delete()
    except discord.Forbidden:
        pass

@bot.command(name='poll')
async def create_poll(ctx, question, *options):
    """63. T·∫°o poll"""
    if len(options) < 2:
        await ctx.send("‚ùå C·∫ßn √≠t nh·∫•t 2 l·ª±a ch·ªçn!")
        return
    
    if len(options) > 10:
        await ctx.send("‚ùå T·ªëi ƒëa 10 l·ª±a ch·ªçn!")
        return
    
    embed = discord.Embed(title="üìä Poll", description=question, color=0x3498db)
    
    emoji_numbers = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']
    
    for i, option in enumerate(options):
        embed.add_field(name=f"{emoji_numbers[i]} {option}", value="\u200b", inline=False)
    
    msg = await ctx.send(embed=embed)
    
    for i in range(len(options)):
        try:
            await msg.add_reaction(emoji_numbers[i])
        except discord.HTTPException:
            continue

@bot.command(name='vote')
async def simple_vote(ctx, *, question):
    """64. Vote ƒë∆°n gi·∫£n"""
    embed = discord.Embed(title="üó≥Ô∏è Vote", description=question, color=0xe74c3c)
    msg = await ctx.send(embed=embed)
    try:
        await msg.add_reaction('üëç')
        await msg.add_reaction('üëé')
    except discord.HTTPException:
        pass

@bot.command(name='automod')
@commands.has_permissions(administrator=True)
async def automod(ctx, action):
    """65. Auto moderation"""
    if action.lower() == 'on':
        await ctx.send("üõ°Ô∏è ƒê√£ b·∫≠t auto moderation")
    elif action.lower() == 'off':
        await ctx.send("üõ°Ô∏è ƒê√£ t·∫Øt auto moderation")
    else:
        await ctx.send("‚ùå S·ª≠ d·ª•ng: !automod on/off")

# =============================================================================
# L·ªÜNH KINH T·∫æ V√Ä LEVELING (66-80)
# =============================================================================

@bot.command(name='daily')
async def daily_reward(ctx):
    """66. Ph·∫ßn th∆∞·ªüng h√†ng ng√†y"""
    user_data = get_user_data(ctx.author.id)
    today = datetime.date.today().isoformat()
    
    if user_data[4] == today:
        await ctx.send("‚ùå B·∫°n ƒë√£ nh·∫≠n ph·∫ßn th∆∞·ªüng h√¥m nay r·ªìi!")
        return
    
    reward = random.randint(50, 200)
    new_coins = user_data[3] + reward
    
    update_user_data(ctx.author.id, coins=new_coins, last_daily=today)
    
    embed = discord.Embed(title="üí∞ Ph·∫ßn th∆∞·ªüng h√†ng ng√†y", color=0xffd700)
    embed.add_field(name="Ph·∫ßn th∆∞·ªüng", value=f"{reward} coins", inline=True)
    embed.add_field(name="T·ªïng coins", value=f"{new_coins} coins", inline=True)
    await ctx.send(embed=embed)

@bot.command(name='balance')
async def check_balance(ctx, member: discord.Member = None):
    """67. Ki·ªÉm tra s·ªë d∆∞"""
    if member is None:
        member = ctx.author
    
    user_data = get_user_data(member.id)
    embed = discord.Embed(title="üí∞ S·ªë d∆∞", color=0xffd700)
    embed.add_field(name="Coins", value=user_data[3], inline=True)
    embed.add_field(name="Level", value=user_data[1], inline=True)
    embed.add_field(name="EXP", value=user_data[2], inline=True)
    await ctx.send(embed=embed)

@bot.command(name='pay')
async def pay_user(ctx, member: discord.Member, amount: int):
    """68. Chuy·ªÉn ti·ªÅn"""
    if amount <= 0:
        await ctx.send("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
        return
    
    if member == ctx.author:
        await ctx.send("‚ùå Kh√¥ng th·ªÉ chuy·ªÉn ti·ªÅn cho ch√≠nh m√¨nh!")
        return
    
    sender_data = get_user_data(ctx.author.id)
    if sender_data[3] < amount:
        await ctx.send("‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn!")
        return
    
    receiver_data = get_user_data(member.id)
    
    update_user_data(ctx.author.id, coins=sender_data[3] - amount)
    update_user_data(member.id, coins=receiver_data[3] + amount)
    
    await ctx.send(f"üí∏ {ctx.author.mention} ƒë√£ chuy·ªÉn {amount} coins cho {member.mention}")

@bot.command(name='shop')
async def shop(ctx):
    """69. C·ª≠a h√†ng"""
    embed = discord.Embed(title="üõí C·ª≠a h√†ng", color=0x9b59b6)
    embed.add_field(name="1. Color Role", value="1000 coins", inline=True)
    embed.add_field(name="2. Custom Status", value="500 coins", inline=True)
    embed.add_field(name="3. Extra EXP", value="200 coins", inline=True)
    embed.add_field(name="4. Profile Badge", value="800 coins", inline=True)
    embed.set_footer(text="S·ª≠ d·ª•ng !buy <s·ªë> ƒë·ªÉ mua")
    await ctx.send(embed=embed)

@bot.command(name='buy')
async def buy_item(ctx, item_id: int):
    """70. Mua v·∫≠t ph·∫©m"""
    items = {
        1: {"name": "Color Role", "price": 1000},
        2: {"name": "Custom Status", "price": 500},
        3: {"name": "Extra EXP", "price": 200},
        4: {"name": "Profile Badge", "price": 800}
    }
    
    if item_id not in items:
        await ctx.send("‚ùå V·∫≠t ph·∫©m kh√¥ng t·ªìn t·∫°i!")
        return
    
    user_data = get_user_data(ctx.author.id)
    item = items[item_id]
    
    if user_data[3] < item["price"]:
        await ctx.send("‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn!")
        return
    
    update_user_data(ctx.author.id, coins=user_data[3] - item["price"])
    await ctx.send(f"‚úÖ ƒê√£ mua {item['name']} v·ªõi gi√° {item['price']} coins!")

@bot.command(name='inventory')
async def user_inventory(ctx):
    """71. T√∫i ƒë·ªì"""
    embed = discord.Embed(title="üéí T√∫i ƒë·ªì", description="T√∫i ƒë·ªì c·ªßa b·∫°n ƒëang tr·ªëng", color=0x8e44ad)
    await ctx.send(embed=embed)

@bot.command(name='gamble')
async def gamble(ctx, amount: int):
    """72. C·ªù b·∫°c"""
    if amount <= 0:
        await ctx.send("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
        return
    
    user_data = get_user_data(ctx.author.id)
    if user_data[3] < amount:
        await ctx.send("‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn!")
        return
    
    win_chance = 0.45  # 45% c∆° h·ªôi th·∫Øng
    won = random.random() < win_chance
    
    if won:
        new_coins = user_data[3] + amount
        await ctx.send(f"üéâ B·∫°n th·∫Øng! +{amount} coins (T·ªïng: {new_coins})")
    else:
        new_coins = user_data[3] - amount
        await ctx.send(f"üí∏ B·∫°n thua! -{amount} coins (C√≤n l·∫°i: {new_coins})")
    
    update_user_data(ctx.author.id, coins=new_coins)

@bot.command(name='work')
async def work(ctx):
    """73. L√†m vi·ªác ki·∫øm ti·ªÅn"""
    jobs = [
        {"name": "Code reviewer", "pay": (50, 150)},
        {"name": "Bug fixer", "pay": (30, 100)},
        {"name": "Database admin", "pay": (70, 200)},
        {"name": "Discord moderator", "pay": (40, 120)}
    ]
    
    job = random.choice(jobs)
    earnings = random.randint(*job["pay"])
    
    user_data = get_user_data(ctx.author.id)
    new_coins = user_data[3] + earnings
    new_exp = user_data[2] + 10
    
    # Level up check
    new_level = user_data[1]
    exp_needed = new_level * 100
    levelup_msg = ""
    if new_exp >= exp_needed:
        new_level += 1
        new_exp = 0
        levelup_msg = f"\nüéâ Level up! B·∫°n ƒë√£ l√™n level {new_level}!"
    
    update_user_data(ctx.author.id, level=new_level, exp=new_exp, coins=new_coins)
    
    embed = discord.Embed(title="üíº K·∫øt qu·∫£ l√†m vi·ªác", color=0x2ecc71)
    embed.add_field(name="C√¥ng vi·ªác", value=job["name"], inline=True)
    embed.add_field(name="Thu nh·∫≠p", value=f"{earnings} coins", inline=True)
    embed.add_field(name="EXP", value="+10", inline=True)
    await ctx.send(embed=embed)
    
    if levelup_msg:
        await ctx.send(levelup_msg)

@bot.command(name='level')
async def check_level(ctx, member: discord.Member = None):
    """74. Ki·ªÉm tra level"""
    if member is None:
        member = ctx.author
    
    user_data = get_user_data(member.id)
    level = user_data[1]
    exp = user_data[2]
    exp_needed = level * 100
    
    embed = discord.Embed(title=f"‚≠ê Level c·ªßa {member.display_name}", color=0xe67e22)
    embed.add_field(name="Level", value=level, inline=True)
    embed.add_field(name="EXP", value=f"{exp}/{exp_needed}", inline=True)
    embed.add_field(name="Ti·∫øn ƒë·ªô", value=f"{round(exp/exp_needed*100, 1)}%", inline=True)
    
    # Progress bar
    progress = int(exp / exp_needed * 20)
    bar = "‚ñà" * progress + "‚ñë" * (20 - progress)
    embed.add_field(name="Thanh ti·∫øn ƒë·ªô", value=f"`{bar}`", inline=False)
    
    await ctx.send(embed=embed)

@bot.command(name='leaderboard')
async def leaderboard(ctx, lb_type="level"):
    """75. B·∫£ng x·∫øp h·∫°ng"""
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    
    if lb_type.lower() == "level":
        c.execute("SELECT user_id, level, exp FROM users ORDER BY level DESC, exp DESC LIMIT 10")
        title = "‚≠ê B·∫£ng x·∫øp h·∫°ng Level"
    elif lb_type.lower() == "coins":
        c.execute("SELECT user_id, coins FROM users ORDER BY coins DESC LIMIT 10")
        title = "üí∞ B·∫£ng x·∫øp h·∫°ng Coins"
    else:
        await ctx.send("‚ùå Lo·∫°i b·∫£ng x·∫øp h·∫°ng: level ho·∫∑c coins")
        conn.close()
        return
    
    results = c.fetchall()
    conn.close()
    
    if not results:
        await ctx.send("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu!")
        return
    
    embed = discord.Embed(title=title, color=0xf39c12)
    
    for i, result in enumerate(results, 1):
        try:
            user = bot.get_user(result[0])
            user_name = user.display_name if user else f"User {result[0]}"
            
            if lb_type.lower() == "level":
                value = f"Level {result[1]} ({result[2]} EXP)"
            else:
                value = f"{result[1]} coins"
            
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            embed.add_field(name=f"{medal} {user_name}", value=value, inline=False)
        except:
            continue
    
    await ctx.send(embed=embed)

@bot.command(name='rank')
async def user_rank(ctx, member: discord.Member = None):
    """76. X·∫øp h·∫°ng c√° nh√¢n"""
    if member is None:
        member = ctx.author
    
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("SELECT user_id, level, exp, coins FROM users ORDER BY level DESC, exp DESC")
    results = c.fetchall()
    conn.close()
    
    for i, result in enumerate(results, 1):
        if result[0] == member.id:
            embed = discord.Embed(title=f"üèÜ X·∫øp h·∫°ng c·ªßa {member.display_name}", color=0xe67e22)
            embed.add_field(name="V·ªã tr√≠", value=f"#{i}", inline=True)
            embed.add_field(name="Level", value=result[1], inline=True)
            embed.add_field(name="Coins", value=result[3], inline=True)
            await ctx.send(embed=embed)
            return
    
    await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu!")

@bot.command(name='exp')
@commands.has_permissions(administrator=True)
async def give_exp(ctx, member: discord.Member, amount: int):
    """77. T·∫∑ng EXP (Admin only)"""
    user_data = get_user_data(member.id)
    new_exp = user_data[2] + amount
    new_level = user_data[1]
    
    # Check level up
    exp_needed = new_level * 100
    while new_exp >= exp_needed:
        new_level += 1
        new_exp -= exp_needed
        exp_needed = new_level * 100
    
    update_user_data(member.id, level=new_level, exp=new_exp)
    await ctx.send(f"‚úÖ ƒê√£ t·∫∑ng {amount} EXP cho {member.mention}")

@bot.command(name='profile')
async def user_profile(ctx, member: discord.Member = None):
    """78. H·ªì s∆° ng∆∞·ªùi d√πng"""
    if member is None:
        member = ctx.author
    
    user_data = get_user_data(member.id)
    
    embed = discord.Embed(title=f"üë§ H·ªì s∆° {member.display_name}", color=member.color)
    embed.add_field(name="Level", value=user_data[1], inline=True)
    embed.add_field(name="EXP", value=user_data[2], inline=True)
    embed.add_field(name="Coins", value=user_data[3], inline=True)
    
    if member.avatar:
        embed.set_thumbnail(url=member.avatar.url)
    
    await ctx.send(embed=embed)

@bot.command(name='badge')
async def user_badges(ctx):
    """79. Huy hi·ªáu"""
    embed = discord.Embed(title="üèÖ Huy hi·ªáu c·ªßa b·∫°n", description="Ch∆∞a c√≥ huy hi·ªáu n√†o", color=0x9b59b6)
    await ctx.send(embed=embed)

@bot.command(name='achievement')
async def achievements(ctx):
    """80. Th√†nh t·ª±u"""
    embed = discord.Embed(title="üèÜ Th√†nh t·ª±u", description="Danh s√°ch th√†nh t·ª±u s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t", color=0xf1c40f)
    await ctx.send(embed=embed)

# =============================================================================
# L·ªÜNH TI·ªÜN √çCH N√ÇNG CAO (81-100)
# =============================================================================

@bot.command(name='remind')
async def set_reminder(ctx, time_str, *, message):
    """81. ƒê·∫∑t nh·∫Øc nh·ªü"""
    try:
        # Parse time (simplified - only minutes)
        if time_str.endswith('m'):
            minutes = int(time_str[:-1])
        elif time_str.endswith('h'):
            minutes = int(time_str[:-1]) * 60
        else:
            minutes = int(time_str)
        
        if minutes > 10080:  # Max 1 week
            await ctx.send("‚ùå Th·ªùi gian t·ªëi ƒëa l√† 1 tu·∫ßn!")
            return
        
        remind_time = (datetime.datetime.now() + datetime.timedelta(minutes=minutes)).isoformat()
        
        conn = sqlite3.connect('bot_data.db')
        c = conn.cursor()
        c.execute("INSERT INTO reminders (user_id, message, remind_time) VALUES (?, ?, ?)",
                 (ctx.author.id, message, remind_time))
        conn.commit()
        conn.close()
        
        await ctx.send(f"‚è∞ S·∫Ω nh·∫Øc b·∫°n sau {minutes} ph√∫t: {message}")
    except ValueError:
        await ctx.send("‚ùå ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá! (V√≠ d·ª•: 30m, 2h)")

@tasks.loop(minutes=1)
async def check_reminders():
    """Ki·ªÉm tra nh·∫Øc nh·ªü"""
    try:
        conn = sqlite3.connect('bot_data.db')
        c = conn.cursor()
        c.execute("SELECT * FROM reminders WHERE remind_time <= ?", (datetime.datetime.now().isoformat(),))
        reminders = c.fetchall()
        
        for reminder in reminders:
            try:
                user = bot.get_user(reminder[1])
                if user:
                    embed = discord.Embed(title="‚è∞ Nh·∫Øc nh·ªü", description=reminder[2], color=0xe74c3c)
                    await user.send(embed=embed)
                
                c.execute("DELETE FROM reminders WHERE id = ?", (reminder[0],))
            except:
                continue
        
        conn.commit()
        conn.close()
    except Exception as e:
        print(f"L·ªói check_reminders: {e}")

@bot.command(name='todo')
async def todo_list(ctx, action="list", *, item=""):
    """82. Danh s√°ch vi·ªác c·∫ßn l√†m"""
    # Simplified todo - using in-memory storage
    if not hasattr(bot, 'todos'):
        bot.todos = {}
    
    user_id = ctx.author.id
    if user_id not in bot.todos:
        bot.todos[user_id] = []
    
    if action.lower() == "add" and item:
        bot.todos[user_id].append(item)
        await ctx.send(f"‚úÖ ƒê√£ th√™m: {item}")
    elif action.lower() == "remove" and item.isdigit():
        idx = int(item) - 1
        if 0 <= idx < len(bot.todos[user_id]):
            removed = bot.todos[user_id].pop(idx)
            await ctx.send(f"üóëÔ∏è ƒê√£ x√≥a: {removed}")
        else:
            await ctx.send("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá!")
    elif action.lower() == "list":
        if not bot.todos[user_id]:
            await ctx.send("üìù Danh s√°ch vi·ªác c·∫ßn l√†m tr·ªëng!")
        else:
            embed = discord.Embed(title="üìù Vi·ªác c·∫ßn l√†m", color=0x3498db)
            for i, task in enumerate(bot.todos[user_id], 1):
                embed.add_field(name=f"{i}.", value=task, inline=False)
            await ctx.send(embed=embed)
    else:
        await ctx.send("‚ùå S·ª≠ d·ª•ng: !todo add/remove/list [item]")

@bot.command(name='note')
async def notes(ctx, action="list", note_id: int = 0, *, content=""):
    """83. Ghi ch√∫"""
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    user_id = ctx.author.id
    
    if action.lower() == "add" and content:
        # Get next note ID
        c.execute("SELECT MAX(note_id) FROM notes WHERE user_id = ?", (user_id,))
        max_id = c.fetchone()[0]
        new_id = (max_id or 0) + 1
        
        created_at = datetime.datetime.now().isoformat()
        c.execute("INSERT INTO notes (user_id, note_id, content, created_at) VALUES (?, ?, ?, ?)",
                 (user_id, new_id, content, created_at))
        conn.commit()
        await ctx.send(f"üìù ƒê√£ l∆∞u ghi ch√∫ #{new_id}")
        
    elif action.lower() == "remove" and note_id > 0:
        c.execute("DELETE FROM notes WHERE user_id = ? AND note_id = ?", (user_id, note_id))
        if c.rowcount > 0:
            conn.commit()
            await ctx.send(f"üóëÔ∏è ƒê√£ x√≥a ghi ch√∫ #{note_id}")
        else:
            await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y ghi ch√∫!")
            
    elif action.lower() == "list":
        c.execute("SELECT note_id, content, created_at FROM notes WHERE user_id = ? ORDER BY note_id", (user_id,))
        notes = c.fetchall()
        
        if not notes:
            await ctx.send("üìù Ch∆∞a c√≥ ghi ch√∫ n√†o!")
        else:
            embed = discord.Embed(title="üìù Ghi ch√∫ c·ªßa b·∫°n", color=0x9b59b6)
            for note in notes[:10]:  # Limit to 10 notes
                created = datetime.datetime.fromisoformat(note[2]).strftime("%d/%m/%Y")
                embed.add_field(name=f"#{note[0]} ({created})", value=note[1][:100], inline=False)
            await ctx.send(embed=embed)
    else:
        await ctx.send("‚ùå S·ª≠ d·ª•ng: !note add/remove/list [id] [content]")
    
    conn.close()

@bot.command(name='calc')
async def calculator(ctx, *, expression):
    """84. M√°y t√≠nh n√¢ng cao"""
    try:
        # Th√™m c√°c h√†m to√°n h·ªçc
        import math as m
        
        # Thay th·∫ø c√°c h√†m
        expression = expression.replace('sin', 'm.sin')
        expression = expression.replace('cos', 'm.cos')
        expression = expression.replace('tan', 'm.tan')
        expression = expression.replace('sqrt', 'm.sqrt')
        expression = expression.replace('log', 'm.log')
        expression = expression.replace('pi', 'm.pi')
        expression = expression.replace('e', 'm.e')
        
        result = eval(expression)
        
        embed = discord.Embed(title="üßÆ M√°y t√≠nh", color=0x34495e)
        embed.add_field(name="Bi·ªÉu th·ª©c", value=f"```{expression}```", inline=False)
        embed.add_field(name="K·∫øt qu·∫£", value=f"```{result}```", inline=False)
        await ctx.send(embed=embed)
    except Exception:
        await ctx.send("‚ùå Bi·ªÉu th·ª©c kh√¥ng h·ª£p l·ªá!")

@bot.command(name='convert')
async def unit_converter(ctx, value: float, from_unit, to_unit):
    """85. Chuy·ªÉn ƒë·ªïi ƒë∆°n v·ªã"""
    # Temperature conversions
    if from_unit.lower() == 'c' and to_unit.lower() == 'f':
        result = (value * 9/5) + 32
        await ctx.send(f"üå°Ô∏è {value}¬∞C = {result}¬∞F")
    elif from_unit.lower() == 'f' and to_unit.lower() == 'c':
        result = (value - 32) * 5/9
        await ctx.send(f"üå°Ô∏è {value}¬∞F = {result}¬∞C")
    
    # Length conversions
    elif from_unit.lower() == 'm' and to_unit.lower() == 'ft':
        result = value * 3.28084
        await ctx.send(f"üìè {value}m = {result}ft")
    elif from_unit.lower() == 'ft' and to_unit.lower() == 'm':
        result = value / 3.28084
        await ctx.send(f"üìè {value}ft = {result}m")
    
    # Weight conversions
    elif from_unit.lower() == 'kg' and to_unit.lower() == 'lb':
        result = value * 2.20462
        await ctx.send(f"‚öñÔ∏è {value}kg = {result}lb")
    elif from_unit.lower() == 'lb' and to_unit.lower() == 'kg':
        result = value / 2.20462
        await ctx.send(f"‚öñÔ∏è {value}lb = {result}kg")
    
    else:
        await ctx.send("‚ùå Chuy·ªÉn ƒë·ªïi h·ªó tr·ª£: C‚ÜîF, m‚Üîft, kg‚Üîlb")

@bot.command(name='search')
async def web_search(ctx, *, query):
    """86. T√¨m ki·∫øm web"""
    encoded_query = urllib.parse.quote(query)
    google_url = f"https://www.google.com/search?q={encoded_query}"
    
    embed = discord.Embed(title="üîç K·∫øt qu·∫£ t√¨m ki·∫øm", color=0x4285f4)
    embed.add_field(name="Truy v·∫•n", value=query, inline=False)
    embed.add_field(name="Link Google", value=google_url, inline=False)
    await ctx.send(embed=embed)

@bot.command(name='news')
async def latest_news(ctx, category="general"):
    """87. Tin t·ª©c m·ªõi nh·∫•t"""
    api_key = os.getenv("NEWSAPI_KEY")
    if not api_key:
        await ctx.send("‚ùå L·ªói: Thi·∫øu API key cho NewsAPI. Vui l√≤ng li√™n h·ªá admin!")
        return

    # Danh m·ª•c h·ª£p l·ªá c·ªßa NewsAPI
    valid_categories = ["business", "entertainment", "general", "health", "science", "sports", "technology"]
    if category.lower() not in valid_categories:
        await ctx.send(f"‚ùå Danh m·ª•c kh√¥ng h·ª£p l·ªá! Ch·ªçn m·ªôt trong: {', '.join(valid_categories)}")
        return

    # URL API
    url = f"https://newsapi.org/v2/top-headlines?category={category.lower()}&language=en&apiKey={api_key}"
    
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()  # Ki·ªÉm tra l·ªói HTTP
        data = response.json()
        
        if data["status"] != "ok" or not data.get("articles"):
            await ctx.send(f"üì∞ Kh√¥ng t√¨m th·∫•y tin t·ª©c trong danh m·ª•c {category}!")
            return

        # L·∫•y t·ªëi ƒëa 5 b√†i b√°o
        articles = data["articles"][:5]
        embed = discord.Embed(title=f"üì∞ Tin t·ª©c m·ªõi nh·∫•t - {category.capitalize()}", color=0x1e90ff)
        
        for i, article in enumerate(articles, 1):
            title = article.get("title", "Kh√¥ng c√≥ ti√™u ƒë·ªÅ")[:100]
            description = article.get("description", "Kh√¥ng c√≥ m√¥ t·∫£")[:150]
            url = article.get("url", "#")
            embed.add_field(
                name=f"{i}. {title}",
                value=f"{description}...\n[ƒê·ªçc th√™m]({url})",
                inline=False
            )
        
        embed.set_footer(text="Ngu·ªìn: NewsAPI.org | C·∫≠p nh·∫≠t: " + datetime.datetime.now().strftime("%d/%m/%Y %H:%M"))
        await ctx.send(embed=embed)
    
    except requests.exceptions.RequestException as e:
        await ctx.send(f"‚ùå L·ªói khi l·∫•y tin t·ª©c: {str(e)}")

@bot.command(name='stock')
async def stock_price(ctx, symbol):
    """88. Gi√° c·ªï phi·∫øu"""
    await ctx.send(f"üìà Gi√° c·ªï phi·∫øu {symbol.upper()}: C·∫ßn API ƒë·ªÉ hi·ªÉn th·ªã gi√° th·ª±c")

@bot.command(name='crypto')
async def crypto_price(ctx, coin="bitcoin"):
    """89. Gi√° crypto"""
    await ctx.send(f"‚Çø Gi√° {coin}: C·∫ßn API ƒë·ªÉ hi·ªÉn th·ªã gi√° th·ª±c")

@bot.command(name='bookmark')
async def bookmark(ctx, action="list", *, url=""):
    """90. Bookmark"""
    if not hasattr(bot, 'bookmarks'):
        bot.bookmarks = {}
    
    user_id = ctx.author.id
    if user_id not in bot.bookmarks:
        bot.bookmarks[user_id] = []
    
    if action.lower() == "add" and url:
        bot.bookmarks[user_id].append({"url": url, "added": datetime.datetime.now().isoformat()})
        await ctx.send(f"üîñ ƒê√£ l∆∞u bookmark: {url}")
    elif action.lower() == "list":
        if not bot.bookmarks[user_id]:
            await ctx.send("üîñ Ch∆∞a c√≥ bookmark n√†o!")
        else:
            embed = discord.Embed(title="üîñ Bookmark c·ªßa b·∫°n", color=0x3498db)
            for i, bookmark in enumerate(bot.bookmarks[user_id][-10:], 1):
                added_date = datetime.datetime.fromisoformat(bookmark["added"]).strftime("%d/%m")
                embed.add_field(name=f"{i}. ({added_date})", value=bookmark["url"], inline=False)
            await ctx.send(embed=embed)
    else:
        await ctx.send("‚ùå S·ª≠ d·ª•ng: !bookmark add/list [url]")

@bot.command(name='schedule')
async def schedule_event(ctx, time_str, *, event):
    """91. L√™n l·ªãch s·ª± ki·ªán"""
    embed = discord.Embed(title="üìÖ S·ª± ki·ªán ƒë√£ l√™n l·ªãch", color=0xe67e22)
    embed.add_field(name="Th·ªùi gian", value=time_str, inline=True)
    embed.add_field(name="S·ª± ki·ªán", value=event, inline=True)
    embed.add_field(name="Ng∆∞·ªùi t·∫°o", value=ctx.author.mention, inline=True)
    await ctx.send(embed=embed)

@bot.command(name='timer')
async def start_timer(ctx, minutes: int):
    """92. ƒê·∫∑t timer"""
    if minutes > 60:
        minutes = 60
    
    embed = discord.Embed(title="‚è±Ô∏è Timer", description=f"Timer {minutes} ph√∫t ƒë√£ b·∫Øt ƒë·∫ßu!", color=0xe74c3c)
    await ctx.send(embed=embed)
    
    await asyncio.sleep(minutes * 60)
    
    embed = discord.Embed(title="‚è∞ Timer k·∫øt th√∫c!", description=f"Timer {minutes} ph√∫t ƒë√£ ho√†n th√†nh!", color=0x27ae60)
    await ctx.send(f"{ctx.author.mention}", embed=embed)

@bot.command(name='stopwatch')
async def stopwatch(ctx):
    """93. ƒê·ªìng h·ªì b·∫•m gi·ªù"""
    start_time = time.time()
    embed = discord.Embed(title="‚è±Ô∏è Stopwatch", description="Stopwatch ƒë√£ b·∫Øt ƒë·∫ßu!\nG√µ 'stop' ƒë·ªÉ d·ª´ng", color=0x3498db)
    await ctx.send(embed=embed)
    
    def check(m):
        return m.author == ctx.author and m.channel == ctx.channel and m.content.lower() == 'stop'
    
    try:
        await bot.wait_for('message', check=check, timeout=300)  # 5 minutes max
        end_time = time.time()
        elapsed = round(end_time - start_time, 2)
        await ctx.send(f"‚èπÔ∏è Stopwatch d·ª´ng! Th·ªùi gian: **{elapsed} gi√¢y**")
    except asyncio.TimeoutError:
        await ctx.send("‚è∞ Stopwatch t·ª± ƒë·ªông d·ª´ng sau 5 ph√∫t!")

@bot.command(name='alarm')
async def set_alarm(ctx, time_str):
    """94. ƒê·∫∑t b√°o th·ª©c"""
    try:
        hour, minute = map(int, time_str.split(':'))
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError
        
        now = datetime.datetime.now()
        alarm_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        
        if alarm_time <= now:
            alarm_time += datetime.timedelta(days=1)
        
        await ctx.send(f"‚è∞ B√°o th·ª©c ƒë√£ ƒë·∫∑t l√∫c {time_str}!")
        
        # Simplified - just show message for alarms within 1 hour
        seconds_until = (alarm_time - now).total_seconds()
        if seconds_until < 3600:
            await asyncio.sleep(seconds_until)
            await ctx.send(f"‚è∞ {ctx.author.mention} B√°o th·ª©c! ƒê√£ ƒë·∫øn {time_str}!")
            
    except ValueError:
        await ctx.send("‚ùå ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá! (HH:MM)")

@bot.command(name='backup')
@commands.has_permissions(administrator=True)
async def backup_data(ctx):
    """95. Sao l∆∞u d·ªØ li·ªáu"""
    await ctx.send("üíæ ƒêang sao l∆∞u d·ªØ li·ªáu...")
    await asyncio.sleep(2)
    await ctx.send("‚úÖ ƒê√£ ho√†n th√†nh sao l∆∞u!")

@bot.command(name='export')
async def export_data(ctx, data_type="profile"):
    """96. Xu·∫•t d·ªØ li·ªáu"""
    user_data = get_user_data(ctx.author.id)
    
    if data_type.lower() == "profile":
        data = {
            "user_id": ctx.author.id,
            "username": str(ctx.author),
            "level": user_data[1],
            "exp": user_data[2],
            "coins": user_data[3],
            "export_date": datetime.datetime.now().isoformat()
        }
        
        embed = discord.Embed(title="üì§ Xu·∫•t d·ªØ li·ªáu", color=0x95a5a6)
        embed.add_field(name="Lo·∫°i", value="Profile", inline=True)
        embed.add_field(name="D·ªØ li·ªáu", value=f"```json\n{json.dumps(data, indent=2)}```", inline=False)
        await ctx.send(embed=embed)
    else:
        await ctx.send("‚ùå Lo·∫°i d·ªØ li·ªáu h·ªó tr·ª£: profile")

@bot.command(name='import')
@commands.has_permissions(administrator=True)
async def import_data(ctx):
    """97. Nh·∫≠p d·ªØ li·ªáu"""
    await ctx.send("üì• T√≠nh nƒÉng import d·ªØ li·ªáu (C·∫ßn file ƒë√≠nh k√®m)")

@bot.command(name='stats')
async def server_stats(ctx):
    """98. Th·ªëng k√™ server"""
    guild = ctx.guild
    
    # Count channels by type
    text_channels = len([ch for ch in guild.channels if isinstance(ch, discord.TextChannel)])
    voice_channels = len([ch for ch in guild.channels if isinstance(ch, discord.VoiceChannel)])
    
    # Count members by status
    online = len([m for m in guild.members if m.status == discord.Status.online])
    idle = len([m for m in guild.members if m.status == discord.Status.idle])
    dnd = len([m for m in guild.members if m.status == discord.Status.dnd])
    offline = len([m for m in guild.members if m.status == discord.Status.offline])
    
    embed = discord.Embed(title="üìä Th·ªëng k√™ Server", color=0x3498db)
    embed.add_field(name="üë• Th√†nh vi√™n", value=f"T·ªïng: {guild.member_count}\nüü¢ Online: {online}\nüü° Idle: {idle}\nüî¥ DND: {dnd}\n‚ö´ Offline: {offline}", inline=True)
    embed.add_field(name="üì∫ K√™nh", value=f"üí¨ Text: {text_channels}\nüîä Voice: {voice_channels}\nT·ªïng: {len(guild.channels)}", inline=True)
    embed.add_field(name="üìà Kh√°c", value=f"üé≠ Roles: {len(guild.roles)}\n‚≠ê Boost: {guild.premium_subscription_count}\nüìÖ T·∫°o: {guild.created_at.strftime('%d/%m/%Y')}", inline=True)
    
    await ctx.send(embed=embed)

@bot.command(name='analyze')
async def analyze_user(ctx, member: discord.Member = None):
    """99. Ph√¢n t√≠ch ng∆∞·ªùi d√πng"""
    if member is None:
        member = ctx.author
    
    user_data = get_user_data(member.id)
    
    embed = discord.Embed(title=f"üîç Ph√¢n t√≠ch {member.display_name}", color=0x9b59b6)
    
    # Activity level based on level and exp
    total_activity = user_data[1] * 100 + user_data[2]
    if total_activity < 200:
        activity_level = "M·ªõi tham gia"
    elif total_activity < 500:
        activity_level = "Ho·∫°t ƒë·ªông v·ª´a ph·∫£i"
    elif total_activity < 1000:
        activity_level = "Ho·∫°t ƒë·ªông t√≠ch c·ª±c"
    else:
        activity_level = "R·∫•t t√≠ch c·ª±c"
    
    embed.add_field(name="üìä M·ª©c ƒë·ªô ho·∫°t ƒë·ªông", value=activity_level, inline=True)
    embed.add_field(name="üí∞ T√¨nh tr·∫°ng kinh t·∫ø", value="·ªîn ƒë·ªãnh" if user_data[3] > 500 else "C·∫ßn c·∫£i thi·ªán", inline=True)
    embed.add_field(name="‚≠ê Ti·ªÅm nƒÉng", value="Cao" if user_data[1] > 5 else "ƒêang ph√°t tri·ªÉn", inline=True)
    
    await ctx.send(embed=embed)

@bot.command(name='report')
async def generate_report(ctx, report_type="daily"):
    """100. T·∫°o b√°o c√°o"""
    embed = discord.Embed(title="üìã B√°o c√°o h·ªá th·ªëng", color=0x2c3e50)
    
    if report_type.lower() == "daily":
        embed.add_field(name="üìÖ Ng√†y", value=datetime.date.today().strftime("%d/%m/%Y"), inline=True)
        embed.add_field(name="ü§ñ Tr·∫°ng th√°i bot", value="Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng", inline=True)
        embed.add_field(name="üìä L·ªánh s·ª≠ d·ª•ng", value="ƒêang thu th·∫≠p d·ªØ li·ªáu", inline=True)
        embed.add_field(name="üë• Ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông", value=len(bot.users), inline=True)
        embed.add_field(name="üè† Servers", value=len(bot.guilds), inline=True)
        embed.add_field(name="üíæ Database", value="K·∫øt n·ªëi ·ªïn ƒë·ªãnh", inline=True)
    
    elif report_type.lower() == "system":
        embed.add_field(name="üñ•Ô∏è CPU", value="ƒêang ho·∫°t ƒë·ªông", inline=True)
        embed.add_field(name="üíø RAM", value="ƒêang s·ª≠ d·ª•ng", inline=True)
        embed.add_field(name="üåê Network", value="K·∫øt n·ªëi t·ªët", inline=True)
    
    else:
        await ctx.send("‚ùå Lo·∫°i b√°o c√°o: daily, system")
        return
    
    await ctx.send(embed=embed)

# =============================================================================
# L·ªÜNH B·ªî SUNG V√Ä ERROR HANDLING
# =============================================================================

@bot.command(name='ascii')
async def ascii_art(ctx, *, text):
    """Bonus: ASCII Art"""
    if len(text) > 10:
        await ctx.send("‚ùå VƒÉn b·∫£n qu√° d√†i! (T·ªëi ƒëa 10 k√Ω t·ª±)")
        return
    
    await ctx.send(ascii_art)

@bot.command(name='log')
@commands.has_permissions(administrator=True)
async def log_command(ctx, action="view"):
    """L·ªánh log cho admin"""
    if action.lower() == "view":
        embed = discord.Embed(title="üìã Log h·ªá th·ªëng", color=0x34495e)
        embed.add_field(name="Tr·∫°ng th√°i", value="ƒêang ho·∫°t ƒë·ªông", inline=True)
        embed.add_field(name="L·ªói g·∫ßn ƒë√¢y", value="Kh√¥ng c√≥", inline=True)
        await ctx.send(embed=embed)
    else:
        await ctx.send("‚ùå S·ª≠ d·ª•ng: !log view")

@bot.event
async def on_command_error(ctx, error):
    """X·ª≠ l√Ω l·ªói l·ªánh"""
    if isinstance(error, commands.CommandNotFound):
        await ctx.send("‚ùå L·ªánh kh√¥ng t·ªìn t·∫°i! S·ª≠ d·ª•ng `!help_all` ƒë·ªÉ xem t·∫•t c·∫£ l·ªánh.")
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("‚ùå Thi·∫øu tham s·ªë! Ki·ªÉm tra c√°ch s·ª≠ d·ª•ng l·ªánh.")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("‚ùå Tham s·ªë kh√¥ng h·ª£p l·ªá!")
    elif isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f"‚è∞ L·ªánh ƒëang cooldown! Th·ª≠ l·∫°i sau {round(error.retry_after, 2)} gi√¢y.")
    elif isinstance(error, commands.BotMissingPermissions):
        await ctx.send("‚ùå Bot kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y!")
    elif isinstance(error, commands.NoPrivateMessage):
        await ctx.send("‚ùå L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong server!")
    elif isinstance(error, commands.PrivateMessageOnly):
        await ctx.send("‚ùå L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong tin nh·∫Øn ri√™ng!")
    elif isinstance(error, discord.Forbidden):
        await ctx.send("‚ùå Bot kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y!")
    elif isinstance(error, discord.NotFound):
        await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c y√™u c·∫ßu!")
    elif isinstance(error, discord.HTTPException):
        await ctx.send("‚ùå C√≥ l·ªói x·∫£y ra khi giao ti·∫øp v·ªõi Discord!")
    else:
        await ctx.send(f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {str(error)}")
        print(f"Unhandled error: {error}")

@bot.event
async def on_message(message):
    """X·ª≠ l√Ω tin nh·∫Øn v√† EXP"""
    if message.author.bot:
        return
    
    # Auto-moderation (simple)
    if message.guild:
        bad_words = ['spam', 'hack', 'cheat', 'L·ªìn', 'c·∫∑c', 'ditmemay', 'https:']  # Th√™m t·ª´ c·∫•m t√πy √Ω
        if any(word in message.content.lower() for word in bad_words):
            try:
                await message.delete()
                await message.channel.send(f"‚ö†Ô∏è {message.author.mention}, tin nh·∫Øn c·ªßa b·∫°n ch·ª©a n·ªôi dung kh√¥ng ph√π h·ª£p!", delete_after=5)
            except discord.Forbidden:
                pass
    
    # Random EXP gain (gi·∫£m t·∫ßn su·∫•t ƒë·ªÉ tr√°nh spam)
    if random.randint(1, 20) == 1:  # 5% chance thay v√¨ 10%
        user_data = get_user_data(message.author.id)
        exp_gain = random.randint(1, 3)  # Gi·∫£m EXP gain
        new_exp = user_data[2] + exp_gain
        new_level = user_data[1]
        
        # Check level up
        exp_needed = new_level * 100
        levelup_msg = ""
        if new_exp >= exp_needed:
            new_level += 1
            new_exp = new_exp - exp_needed  # Gi·ªØ l·∫°i EXP th·ª´a
            levelup_msg = f"üéâ Ch√∫c m·ª´ng {message.author.mention}! B·∫°n ƒë√£ l√™n level {new_level}!"
        
        update_user_data(message.author.id, level=new_level, exp=new_exp)
        
        # Ch·ªâ th√¥ng b√°o level up, kh√¥ng th√¥ng b√°o EXP gain ƒë·ªÉ tr√°nh spam
        if levelup_msg:
            embed = discord.Embed(title="üéä Level Up!", description=levelup_msg, color=0x00ff00)
            embed.add_field(name="Level m·ªõi", value=new_level, inline=True)
            embed.add_field(name="EXP", value=f"{new_exp}/{new_level * 100}", inline=True)
            await message.channel.send(embed=embed, delete_after=10)
    
    # Process commands after handling EXP
    await bot.process_commands(message)

@bot.event
async def on_member_join(member):
    """Ch√†o m·ª´ng th√†nh vi√™n m·ªõi"""
    # T√¨m k√™nh welcome (c√≥ th·ªÉ t√πy ch·ªânh)
    welcome_channel = discord.utils.get(member.guild.channels, name='welcome')
    if not welcome_channel:
        welcome_channel = discord.utils.get(member.guild.channels, name='general')
    
    if welcome_channel:
        embed = discord.Embed(
            title="üéâ Ch√†o m·ª´ng th√†nh vi√™n m·ªõi!",
            description=f"Ch√†o m·ª´ng {member.mention} ƒë·∫øn v·ªõi {member.guild.name}!",
            color=0x00ff00
        )
        embed.add_field(name="Th√†nh vi√™n th·ª©", value=f"#{member.guild.member_count}", inline=True)
        embed.add_field(name="Tham gia l√∫c", value=datetime.datetime.now().strftime("%d/%m/%Y %H:%M"), inline=True)
        
        if member.avatar:
            embed.set_thumbnail(url=member.avatar.url)
        
        try:
            await welcome_channel.send(embed=embed)
        except discord.Forbidden:
            pass

@bot.event
async def on_member_remove(member):
    """Th√¥ng b√°o khi th√†nh vi√™n r·ªùi kh·ªèi server"""
    # T√¨m k√™nh log ho·∫∑c general
    log_channel = discord.utils.get(member.guild.channels, name='log')
    if not log_channel:
        log_channel = discord.utils.get(member.guild.channels, name='general')
    
    if log_channel:
        embed = discord.Embed(
            title="üëã Th√†nh vi√™n ƒë√£ r·ªùi",
            description=f"{member.display_name} ƒë√£ r·ªùi kh·ªèi server",
            color=0xff0000
        )
        embed.add_field(name="T√™n", value=str(member), inline=True)
        embed.add_field(name="ID", value=member.id, inline=True)
        embed.add_field(name="R·ªùi l√∫c", value=datetime.datetime.now().strftime("%d/%m/%Y %H:%M"), inline=True)
        
        try:
            await log_channel.send(embed=embed)
        except discord.Forbidden:
            pass

@bot.event
async def on_guild_join(guild):
    """Khi bot ƒë∆∞·ª£c th√™m v√†o server m·ªõi"""
    print(f"Bot ƒë√£ ƒë∆∞·ª£c th√™m v√†o server: {guild.name} (ID: {guild.id})")
    
    # T√¨m k√™nh ƒë·ªÉ g·ª≠i tin nh·∫Øn ch√†o
    channel = discord.utils.get(guild.channels, name='general')
    if not channel:
        channel = guild.system_channel
    if not channel:
        # T√¨m k√™nh text ƒë·∫ßu ti√™n m√† bot c√≥ th·ªÉ g·ª≠i tin nh·∫Øn
        for ch in guild.text_channels:
            if ch.permissions_for(guild.me).send_messages:
                channel = ch
                break
    
    if channel:
        embed = discord.Embed(
            title="ü§ñ Xin ch√†o!",
            description="C·∫£m ∆°n b·∫°n ƒë√£ th√™m t√¥i v√†o server!",
            color=0x00ff00
        )
        embed.add_field(name="B·∫Øt ƒë·∫ßu", value="S·ª≠ d·ª•ng `!help_all` ƒë·ªÉ xem t·∫•t c·∫£ l·ªánh", inline=False)
        embed.add_field(name="H·ªó tr·ª£", value="Bot c√≥ 100+ l·ªánh ti·ªán √≠ch", inline=False)
        
        try:
            await channel.send(embed=embed)
        except discord.Forbidden:
            pass

@bot.event
async def on_guild_remove(guild):
    """Khi bot b·ªã x√≥a kh·ªèi server"""
    print(f"Bot ƒë√£ b·ªã x√≥a kh·ªèi server: {guild.name} (ID: {guild.id})")

# Th√™m m·ªôt s·ªë l·ªánh debug cho admin
@bot.command(name='debug')
@commands.is_owner()
async def debug_info(ctx):
    """Th√¥ng tin debug cho owner"""
    embed = discord.Embed(title="üîß Debug Info", color=0x95a5a6)
    embed.add_field(name="Guilds", value=len(bot.guilds), inline=True)
    embed.add_field(name="Users", value=len(bot.users), inline=True)
    embed.add_field(name="Commands", value=len(bot.commands), inline=True)
    embed.add_field(name="Latency", value=f"{round(bot.latency * 1000)}ms", inline=True)
    
    # Memory usage (n·∫øu c√≥ th·ªÉ)
    try:
        process = psutil.Process()
        memory_mb = process.memory_info().rss / 1024 / 1024
        embed.add_field(name="Memory", value=f"{memory_mb:.2f} MB", inline=True)
    except ImportError:
        embed.add_field(name="Memory", value="N/A", inline=True)
    
    await ctx.send(embed=embed)

@bot.command(name='reload')
@commands.is_owner()
async def reload_bot(ctx):
    """Reload bot (ch·ªâ owner)"""
    await ctx.send("üîÑ ƒêang reload bot...")
    # ·ªû ƒë√¢y b·∫°n c√≥ th·ªÉ th√™m logic reload n·∫øu c·∫ßn
    await ctx.send("‚úÖ Reload ho√†n th√†nh!")

@bot.command(name='shutdown')
@commands.is_owner()
async def shutdown_bot(ctx):
    """T·∫Øt bot (ch·ªâ owner)"""
    await ctx.send("üîå ƒêang t·∫Øt bot...")
    await bot.close()

# Th√™m cooldown cho m·ªôt s·ªë l·ªánh ƒë·ªÉ tr√°nh spam
@bot.command(name='spam_test')
@commands.cooldown(1, 30, commands.BucketType.user)  # 1 l·∫ßn m·ªói 30 gi√¢y
async def spam_test(ctx):
    """L·ªánh test cooldown"""
    await ctx.send("‚úÖ L·ªánh test cooldown ho·∫°t ƒë·ªông!")

# Th√™m m·ªôt s·ªë utility functions
def format_time(seconds):
    """Format seconds th√†nh readable time"""
    if seconds < 60:
        return f"{int(seconds)} gi√¢y"
    elif seconds < 3600:
        return f"{int(seconds // 60)} ph√∫t {int(seconds % 60)} gi√¢y"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours} gi·ªù {minutes} ph√∫t"

def is_url(string):
    """Ki·ªÉm tra xem string c√≥ ph·∫£i URL kh√¥ng"""
    import re
    url_pattern = re.compile(
        r'^https?://'  # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # domain...
        r'localhost|'  # localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or ip
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return url_pattern.match(string) is not None

# Bot startup
if __name__ == "__main__":
    # Store start time for uptime command
    bot.start_time = datetime.datetime.now()
    
    # Load bot token from environment variable
    bot_token = os.getenv("DISCORD_BOT_TOKEN")
    if not bot_token:
        print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y token bot trong bi·∫øn m√¥i tr∆∞·ªùng DISCORD_BOT_TOKEN")
        print("üí° H∆∞·ªõng d·∫´n:")
        print("1. T·∫°o file .env trong th∆∞ m·ª•c d·ª± √°n")
        print("2. Th√™m d√≤ng: DISCORD_BOT_TOKEN=your_bot_token_here")
        print("3. Thay your_bot_token_here b·∫±ng token th·∫≠t c·ªßa bot")
        exit(1)
    
    try:
        print("üöÄ ƒêang kh·ªüi ƒë·ªông bot...")
        print(f"üìä ƒê√£ t·∫£i {len(bot.commands)} l·ªánh")
        print("‚è≥ ƒêang k·∫øt n·ªëi t·ªõi Discord...")
        bot.run(bot_token)
    except discord.errors.LoginFailure:
        print("‚ùå L·ªói: Token bot kh√¥ng h·ª£p l·ªá")
        print("üí° Ki·ªÉm tra l·∫°i token trong file .env")
    except discord.errors.PrivilegedIntentsRequired:
        print("‚ùå L·ªói: Bot c·∫ßn quy·ªÅn Privileged Gateway Intents")
        print("üí° B·∫≠t Message Content Intent trong Discord Developer Portal")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Bot ƒë√£ ƒë∆∞·ª£c d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"‚ùå L·ªói khi kh·ªüi ƒë·ªông bot: {str(e)}")
        print("üí° Ki·ªÉm tra l·∫°i c·∫•u h√¨nh v√† th·ª≠ l·∫°i")
                               